{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_nice",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "PoolIdUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accProfitPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploymentTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "galacticChef",
      "outputs": [
        {
          "internalType": "contract GalacticChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAutoCompoundBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nice",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "niceRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "pendingProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFeeCompounder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GalacticChef",
          "name": "_galacticChef",
          "type": "address"
        }
      ],
      "name": "setGalacticChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFeeCompounder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "setPoolId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "setStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPool",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitBaseline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProfitDistributed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateProfits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawNiceRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
    "1": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/security/ReentrancyGuard.sol",
    "11": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Address.sol",
    "12": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Context.sol",
    "16": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/math/SafeMath.sol",
    "21": "contracts/GalacticChef.sol",
    "23": "contracts/NICEToken.sol",
    "24": "contracts/NiceStaking.sol",
    "29": "interfaces/IFeeDistributor.sol",
    "3": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/IERC20.sol",
    "32": "interfaces/IStaking.sol",
    "6": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/utils/SafeERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/NiceStaking.sol",
    "exportedSymbols": {
      "Address": [
        12694
      ],
      "BitcrushNiceStaking": [
        8393
      ],
      "Context": [
        12716
      ],
      "GalacticChef": [
        6406
      ],
      "IERC20": [
        12374
      ],
      "IFeeDistributor": [
        13316
      ],
      "IStaking": [
        13372
      ],
      "NICEToken": [
        7859
      ],
      "Ownable": [
        11128
      ],
      "ReentrancyGuard": [
        13306
      ],
      "SafeERC20": [
        11352
      ],
      "SafeMath": [
        11664
      ]
    },
    "id": 8394,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7861,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:24"
      },
      {
        "absolutePath": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 7862,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8394,
        "sourceUnit": 11129,
        "src": "56:52:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 7863,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8394,
        "sourceUnit": 11665,
        "src": "109:57:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jmf/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
        "id": 7864,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8394,
        "sourceUnit": 11353,
        "src": "167:65:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/IStaking.sol",
        "file": "../interfaces/IStaking.sol",
        "id": 7865,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8394,
        "sourceUnit": 13373,
        "src": "233:36:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/GalacticChef.sol",
        "file": "./GalacticChef.sol",
        "id": 7866,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8394,
        "sourceUnit": 6407,
        "src": "270:28:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/NICEToken.sol",
        "file": "./NICEToken.sol",
        "id": 7867,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8394,
        "sourceUnit": 7860,
        "src": "299:25:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7868,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11128,
              "src": "358:7:24"
            },
            "id": 7869,
            "nodeType": "InheritanceSpecifier",
            "src": "358:7:24"
          }
        ],
        "canonicalName": "BitcrushNiceStaking",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 8393,
        "linearizedBaseContracts": [
          8393,
          11128,
          12716
        ],
        "name": "BitcrushNiceStaking",
        "nameLocation": "335:19:24",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 7872,
            "libraryName": {
              "id": 7870,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11664,
              "src": "378:8:24"
            },
            "nodeType": "UsingForDirective",
            "src": "372:27:24",
            "typeName": {
              "id": 7871,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "391:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 7876,
            "libraryName": {
              "id": 7873,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11352,
              "src": "410:9:24"
            },
            "nodeType": "UsingForDirective",
            "src": "404:27:24",
            "typeName": {
              "id": 7875,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7874,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 12374,
                "src": "424:6:24"
              },
              "referencedDeclaration": 12374,
              "src": "424:6:24",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$12374",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "bca5503d",
            "id": 7879,
            "mutability": "mutable",
            "name": "performanceFeeCompounder",
            "nameLocation": "451:24:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "436:44:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7877,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "436:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130",
              "id": 7878,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "478:2:24",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10_by_1",
                "typeString": "int_const 10"
              },
              "value": "10"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "bc063e1a",
            "id": 7882,
            "mutability": "constant",
            "name": "MAX_FEE",
            "nameLocation": "535:7:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "511:38:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7880,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "511:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030",
              "id": 7881,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "545:4:24",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000_by_1",
                "typeString": "int_const 1000"
              },
              "value": "1000"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "1f2dc5ef",
            "id": 7885,
            "mutability": "constant",
            "name": "divisor",
            "nameLocation": "605:7:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "581:39:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7883,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "581:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130303030",
              "id": 7884,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "615:5:24",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3e0dc34e",
            "id": 7887,
            "mutability": "mutable",
            "name": "poolId",
            "nameLocation": "641:6:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "626:21:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7886,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "626:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0c56ae3b",
            "id": 7890,
            "mutability": "mutable",
            "name": "stakingPool",
            "nameLocation": "703:11:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "687:27:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IStaking_$13372",
              "typeString": "contract IStaking"
            },
            "typeName": {
              "id": 7889,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7888,
                "name": "IStaking",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 13372,
                "src": "687:8:24"
              },
              "referencedDeclaration": 13372,
              "src": "687:8:24",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IStaking_$13372",
                "typeString": "contract IStaking"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2aabc592",
            "id": 7893,
            "mutability": "mutable",
            "name": "galacticChef",
            "nameLocation": "740:12:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "720:32:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_GalacticChef_$6406",
              "typeString": "contract GalacticChef"
            },
            "typeName": {
              "id": 7892,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7891,
                "name": "GalacticChef",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 6406,
                "src": "720:12:24"
              },
              "referencedDeclaration": 6406,
              "src": "720:12:24",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_GalacticChef_$6406",
                "typeString": "contract GalacticChef"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "92cc410a",
            "id": 7896,
            "mutability": "immutable",
            "name": "nice",
            "nameLocation": "782:4:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "758:28:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC20_$12374",
              "typeString": "contract IERC20"
            },
            "typeName": {
              "id": 7895,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 7894,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 12374,
                "src": "758:6:24"
              },
              "referencedDeclaration": 12374,
              "src": "758:6:24",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$12374",
                "typeString": "contract IERC20"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "BitcrushNiceStaking.UserStaking",
            "id": 7901,
            "members": [
              {
                "constant": false,
                "id": 7898,
                "mutability": "mutable",
                "name": "shares",
                "nameLocation": "830:6:24",
                "nodeType": "VariableDeclaration",
                "scope": 7901,
                "src": "822:14:24",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 7897,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "822:7:24",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7900,
                "mutability": "mutable",
                "name": "profitBaseline",
                "nameLocation": "854:14:24",
                "nodeType": "VariableDeclaration",
                "scope": 7901,
                "src": "846:22:24",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 7899,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "846:7:24",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "UserStaking",
            "nameLocation": "800:11:24",
            "nodeType": "StructDefinition",
            "scope": 8393,
            "src": "793:82:24",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "dc6e13e1",
            "id": 7906,
            "mutability": "mutable",
            "name": "stakings",
            "nameLocation": "919:8:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "880:47:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserStaking_$7901_storage_$",
              "typeString": "mapping(address => struct BitcrushNiceStaking.UserStaking)"
            },
            "typeName": {
              "id": 7905,
              "keyType": {
                "id": 7902,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "888:7:24",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "880:31:24",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserStaking_$7901_storage_$",
                "typeString": "mapping(address => struct BitcrushNiceStaking.UserStaking)"
              },
              "valueType": {
                "id": 7904,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 7903,
                  "name": "UserStaking",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7901,
                  "src": "899:11:24"
                },
                "referencedDeclaration": 7901,
                "src": "899:11:24",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                  "typeString": "struct BitcrushNiceStaking.UserStaking"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "fb777364",
            "id": 7910,
            "mutability": "mutable",
            "name": "niceRewards",
            "nameLocation": "968:11:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "933:46:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 7909,
              "keyType": {
                "id": 7907,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "941:7:24",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "933:27:24",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 7908,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "952:7:24",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "4bf211b8",
            "id": 7912,
            "mutability": "mutable",
            "name": "lastAutoCompoundBlock",
            "nameLocation": "1001:21:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "986:36:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7911,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "986:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b249e88e",
            "id": 7914,
            "mutability": "mutable",
            "name": "accProfitPerShare",
            "nameLocation": "1087:17:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "1072:32:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7913,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1072:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2533830a",
            "id": 7916,
            "mutability": "mutable",
            "name": "totalProfitDistributed",
            "nameLocation": "1149:22:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "1134:37:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7915,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1134:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "668579c9",
            "id": 7918,
            "mutability": "mutable",
            "name": "deploymentTimeStamp",
            "nameLocation": "1221:19:24",
            "nodeType": "VariableDeclaration",
            "scope": 8393,
            "src": "1206:34:24",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7917,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1206:7:24",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 7922,
            "name": "PerformanceFeeUpdated",
            "nameLocation": "1253:21:24",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 7921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7920,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newFee",
                  "nameLocation": "1283:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 7922,
                  "src": "1275:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7919,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1275:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1274:16:24"
            },
            "src": "1247:44:24"
          },
          {
            "anonymous": false,
            "id": 7926,
            "name": "PoolIdUpdated",
            "nameLocation": "1302:13:24",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 7925,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7924,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "1324:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 7926,
                  "src": "1316:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7923,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1316:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1315:16:24"
            },
            "src": "1296:36:24"
          },
          {
            "body": {
              "id": 7941,
              "nodeType": "Block",
              "src": "1364:76:24",
              "statements": [
                {
                  "expression": {
                    "id": 7934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7932,
                      "name": "nice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7896,
                      "src": "1374:4:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$12374",
                        "typeString": "contract IERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7933,
                      "name": "_nice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7929,
                      "src": "1381:5:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$12374",
                        "typeString": "contract IERC20"
                      }
                    },
                    "src": "1374:12:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$12374",
                      "typeString": "contract IERC20"
                    }
                  },
                  "id": 7935,
                  "nodeType": "ExpressionStatement",
                  "src": "1374:12:24"
                },
                {
                  "expression": {
                    "id": 7939,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7936,
                      "name": "deploymentTimeStamp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7918,
                      "src": "1396:19:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 7937,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "1418:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 7938,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "1418:15:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1396:37:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7940,
                  "nodeType": "ExpressionStatement",
                  "src": "1396:37:24"
                }
              ]
            },
            "id": 7942,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7930,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7929,
                  "mutability": "mutable",
                  "name": "_nice",
                  "nameLocation": "1357:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 7942,
                  "src": "1350:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$12374",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 7928,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 7927,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 12374,
                      "src": "1350:6:24"
                    },
                    "referencedDeclaration": 12374,
                    "src": "1350:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$12374",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1349:14:24"
            },
            "returnParameters": {
              "id": 7931,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1364:0:24"
            },
            "scope": 8393,
            "src": "1338:102:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7968,
              "nodeType": "Block",
              "src": "1652:164:24",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 7960,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 7954,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7890,
                              "src": "1691:11:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStaking_$13372",
                                "typeString": "contract IStaking"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IStaking_$13372",
                                "typeString": "contract IStaking"
                              }
                            ],
                            "id": 7953,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1683:7:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 7952,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1683:7:24",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 7955,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1683:20:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "307830",
                              "id": 7958,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1715:3:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0x0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 7957,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1707:7:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 7956,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1707:7:24",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 7959,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1707:12:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1683:36:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7374616b696e6720706f6f6c206164647265737320616c726561647920736574",
                        "id": 7961,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1733:34:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ad1c623447c8d740cd77f89af55d89575bcf9b3896f79ee3d332130c8bc01b72",
                          "typeString": "literal_string \"staking pool address already set\""
                        },
                        "value": "staking pool address already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ad1c623447c8d740cd77f89af55d89575bcf9b3896f79ee3d332130c8bc01b72",
                          "typeString": "literal_string \"staking pool address already set\""
                        }
                      ],
                      "id": 7951,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1662:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 7962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1662:115:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7963,
                  "nodeType": "ExpressionStatement",
                  "src": "1662:115:24"
                },
                {
                  "expression": {
                    "id": 7966,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7964,
                      "name": "stakingPool",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7890,
                      "src": "1787:11:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStaking_$13372",
                        "typeString": "contract IStaking"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7965,
                      "name": "_staking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7946,
                      "src": "1801:8:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStaking_$13372",
                        "typeString": "contract IStaking"
                      }
                    },
                    "src": "1787:22:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$13372",
                      "typeString": "contract IStaking"
                    }
                  },
                  "id": 7967,
                  "nodeType": "ExpressionStatement",
                  "src": "1787:22:24"
                }
              ]
            },
            "documentation": {
              "id": 7943,
              "nodeType": "StructuredDocumentation",
              "src": "1446:141:24",
              "text": "Store `_staking`.\n @param _staking the new value to store\n @dev stores the _staking address in the state variable `staking`"
            },
            "functionSelector": "3028f63a",
            "id": 7969,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7949,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7948,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11070,
                  "src": "1642:9:24"
                },
                "nodeType": "ModifierInvocation",
                "src": "1642:9:24"
              }
            ],
            "name": "setStakingPool",
            "nameLocation": "1601:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7947,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7946,
                  "mutability": "mutable",
                  "name": "_staking",
                  "nameLocation": "1625:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 7969,
                  "src": "1616:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStaking_$13372",
                    "typeString": "contract IStaking"
                  },
                  "typeName": {
                    "id": 7945,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 7944,
                      "name": "IStaking",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 13372,
                      "src": "1616:8:24"
                    },
                    "referencedDeclaration": 13372,
                    "src": "1616:8:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$13372",
                      "typeString": "contract IStaking"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1615:19:24"
            },
            "returnParameters": {
              "id": 7950,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1652:0:24"
            },
            "scope": 8393,
            "src": "1592:224:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7995,
              "nodeType": "Block",
              "src": "2058:171:24",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 7987,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 7981,
                              "name": "galacticChef",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7893,
                              "src": "2097:12:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_GalacticChef_$6406",
                                "typeString": "contract GalacticChef"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_GalacticChef_$6406",
                                "typeString": "contract GalacticChef"
                              }
                            ],
                            "id": 7980,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2089:7:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 7979,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2089:7:24",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 7982,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2089:21:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "307830",
                              "id": 7985,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2122:3:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0x0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 7984,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2114:7:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 7983,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2114:7:24",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 7986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2114:12:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2089:37:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7374616b696e6720706f6f6c206164647265737320616c726561647920736574",
                        "id": 7988,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2140:34:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ad1c623447c8d740cd77f89af55d89575bcf9b3896f79ee3d332130c8bc01b72",
                          "typeString": "literal_string \"staking pool address already set\""
                        },
                        "value": "staking pool address already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ad1c623447c8d740cd77f89af55d89575bcf9b3896f79ee3d332130c8bc01b72",
                          "typeString": "literal_string \"staking pool address already set\""
                        }
                      ],
                      "id": 7978,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2068:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 7989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2068:116:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7990,
                  "nodeType": "ExpressionStatement",
                  "src": "2068:116:24"
                },
                {
                  "expression": {
                    "id": 7993,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7991,
                      "name": "galacticChef",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7893,
                      "src": "2194:12:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_GalacticChef_$6406",
                        "typeString": "contract GalacticChef"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7992,
                      "name": "_galacticChef",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7973,
                      "src": "2209:13:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_GalacticChef_$6406",
                        "typeString": "contract GalacticChef"
                      }
                    },
                    "src": "2194:28:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_GalacticChef_$6406",
                      "typeString": "contract GalacticChef"
                    }
                  },
                  "id": 7994,
                  "nodeType": "ExpressionStatement",
                  "src": "2194:28:24"
                }
              ]
            },
            "documentation": {
              "id": 7970,
              "nodeType": "StructuredDocumentation",
              "src": "1822:161:24",
              "text": "Store `_galacticChef`.\n @param _galacticChef the new value to store\n @dev stores the _galacticChef address in the state variable `galacticChef`"
            },
            "functionSelector": "0c616882",
            "id": 7996,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7976,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7975,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11070,
                  "src": "2048:9:24"
                },
                "nodeType": "ModifierInvocation",
                "src": "2048:9:24"
              }
            ],
            "name": "setGalacticChef",
            "nameLocation": "1997:15:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7974,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7973,
                  "mutability": "mutable",
                  "name": "_galacticChef",
                  "nameLocation": "2026:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 7996,
                  "src": "2013:26:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_GalacticChef_$6406",
                    "typeString": "contract GalacticChef"
                  },
                  "typeName": {
                    "id": 7972,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 7971,
                      "name": "GalacticChef",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6406,
                      "src": "2013:12:24"
                    },
                    "referencedDeclaration": 6406,
                    "src": "2013:12:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_GalacticChef_$6406",
                      "typeString": "contract GalacticChef"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2012:28:24"
            },
            "returnParameters": {
              "id": 7977,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2058:0:24"
            },
            "scope": 8393,
            "src": "1988:241:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8012,
              "nodeType": "Block",
              "src": "2430:70:24",
              "statements": [
                {
                  "expression": {
                    "id": 8006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 8004,
                      "name": "poolId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7887,
                      "src": "2440:6:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 8005,
                      "name": "_poolId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7999,
                      "src": "2449:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2440:16:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8007,
                  "nodeType": "ExpressionStatement",
                  "src": "2440:16:24"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 8009,
                        "name": "_poolId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7999,
                        "src": "2485:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8008,
                      "name": "PoolIdUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7926,
                      "src": "2471:13:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 8010,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2471:22:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8011,
                  "nodeType": "EmitStatement",
                  "src": "2466:27:24"
                }
              ]
            },
            "documentation": {
              "id": 7997,
              "nodeType": "StructuredDocumentation",
              "src": "2235:137:24",
              "text": "Store `_poolId`.\n @param _poolId the new value to store\n @dev stores the _poolId address in the state variable `poolId`"
            },
            "functionSelector": "ac78012c",
            "id": 8013,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 8002,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 8001,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11070,
                  "src": "2420:9:24"
                },
                "nodeType": "ModifierInvocation",
                "src": "2420:9:24"
              }
            ],
            "name": "setPoolId",
            "nameLocation": "2386:9:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8000,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7999,
                  "mutability": "mutable",
                  "name": "_poolId",
                  "nameLocation": "2404:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 8013,
                  "src": "2396:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7998,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2396:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2395:17:24"
            },
            "returnParameters": {
              "id": 8003,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2430:0:24"
            },
            "scope": 8393,
            "src": "2377:123:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8062,
              "nodeType": "Block",
              "src": "2726:472:24",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 8021,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 8017,
                          "name": "stakingPool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7890,
                          "src": "2740:11:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStaking_$13372",
                            "typeString": "contract IStaking"
                          }
                        },
                        "id": 8018,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "totalShares",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 13326,
                        "src": "2740:23:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$",
                          "typeString": "function () external returns (uint256)"
                        }
                      },
                      "id": 8019,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2740:25:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 8020,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2769:1:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2740:30:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 8023,
                  "nodeType": "IfStatement",
                  "src": "2736:43:24",
                  "trueBody": {
                    "functionReturnParameters": 8016,
                    "id": 8022,
                    "nodeType": "Return",
                    "src": "2772:7:24"
                  }
                },
                {
                  "assignments": [
                    8025
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8025,
                      "mutability": "mutable",
                      "name": "requestedProfits",
                      "nameLocation": "2845:16:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8062,
                      "src": "2837:24:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8024,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2837:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8030,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 8028,
                        "name": "poolId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7887,
                        "src": "2889:6:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 8026,
                        "name": "galacticChef",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7893,
                        "src": "2864:12:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_GalacticChef_$6406",
                          "typeString": "contract GalacticChef"
                        }
                      },
                      "id": 8027,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mintRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5460,
                      "src": "2864:24:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) external returns (uint256)"
                      }
                    },
                    "id": 8029,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2864:32:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2837:59:24"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 8033,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 8031,
                      "name": "requestedProfits",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8025,
                      "src": "2910:16:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 8032,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2930:1:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2910:21:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 8035,
                  "nodeType": "IfStatement",
                  "src": "2906:34:24",
                  "trueBody": {
                    "functionReturnParameters": 8016,
                    "id": 8034,
                    "nodeType": "Return",
                    "src": "2933:7:24"
                  }
                },
                {
                  "expression": {
                    "id": 8041,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 8036,
                      "name": "totalProfitDistributed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7916,
                      "src": "2949:22:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 8039,
                          "name": "requestedProfits",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8025,
                          "src": "3001:16:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 8037,
                          "name": "totalProfitDistributed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7916,
                          "src": "2974:22:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 8038,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11528,
                        "src": "2974:26:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 8040,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2974:44:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2949:69:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8042,
                  "nodeType": "ExpressionStatement",
                  "src": "2949:69:24"
                },
                {
                  "assignments": [
                    8044
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8044,
                      "mutability": "mutable",
                      "name": "profitCalc",
                      "nameLocation": "3036:10:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8062,
                      "src": "3028:18:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8043,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3028:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8054,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 8050,
                            "name": "stakingPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7890,
                            "src": "3093:11:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStaking_$13372",
                              "typeString": "contract IStaking"
                            }
                          },
                          "id": 8051,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "totalShares",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 13326,
                          "src": "3093:23:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$",
                            "typeString": "function () external returns (uint256)"
                          }
                        },
                        "id": 8052,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3093:25:24",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "hexValue": "31653132",
                            "id": 8047,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3070:4:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000_by_1",
                              "typeString": "int_const 1000000000000"
                            },
                            "value": "1e12"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000000000_by_1",
                              "typeString": "int_const 1000000000000"
                            }
                          ],
                          "expression": {
                            "id": 8045,
                            "name": "requestedProfits",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8025,
                            "src": "3049:16:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8046,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11558,
                          "src": "3049:20:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8048,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3049:26:24",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 8049,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11573,
                      "src": "3049:30:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 8053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3049:79:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3028:100:24"
                },
                {
                  "expression": {
                    "id": 8060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 8055,
                      "name": "accProfitPerShare",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7914,
                      "src": "3138:17:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 8058,
                          "name": "profitCalc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8044,
                          "src": "3180:10:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 8056,
                          "name": "accProfitPerShare",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7914,
                          "src": "3158:17:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 8057,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11528,
                        "src": "3158:21:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 8059,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3158:33:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3138:53:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8061,
                  "nodeType": "ExpressionStatement",
                  "src": "3138:53:24"
                }
              ]
            },
            "documentation": {
              "id": 8014,
              "nodeType": "StructuredDocumentation",
              "src": "2506:183:24",
              "text": "@notice updates accProfitPerShare based on current Profit available and totalShares\n @dev this allows for consistent profit reporting and no change on profits to distribute"
            },
            "functionSelector": "51496bbd",
            "id": 8063,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateProfits",
            "nameLocation": "2703:13:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8015,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2716:2:24"
            },
            "returnParameters": {
              "id": 8016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2726:0:24"
            },
            "scope": 8393,
            "src": "2694:504:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8101,
              "nodeType": "Block",
              "src": "3438:261:24",
              "statements": [
                {
                  "assignments": [
                    8073
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8073,
                      "mutability": "mutable",
                      "name": "user",
                      "nameLocation": "3467:4:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8101,
                      "src": "3448:23:24",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserStaking_$7901_memory_ptr",
                        "typeString": "struct BitcrushNiceStaking.UserStaking"
                      },
                      "typeName": {
                        "id": 8072,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 8071,
                          "name": "UserStaking",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7901,
                          "src": "3448:11:24"
                        },
                        "referencedDeclaration": 7901,
                        "src": "3448:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                          "typeString": "struct BitcrushNiceStaking.UserStaking"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8077,
                  "initialValue": {
                    "baseExpression": {
                      "id": 8074,
                      "name": "stakings",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7906,
                      "src": "3474:8:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserStaking_$7901_storage_$",
                        "typeString": "mapping(address => struct BitcrushNiceStaking.UserStaking storage ref)"
                      }
                    },
                    "id": 8076,
                    "indexExpression": {
                      "id": 8075,
                      "name": "_address",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8066,
                      "src": "3483:8:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3474:18:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserStaking_$7901_storage",
                      "typeString": "struct BitcrushNiceStaking.UserStaking storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3448:44:24"
                },
                {
                  "expression": {
                    "id": 8086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        {
                          "expression": {
                            "id": 8078,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8073,
                            "src": "3503:4:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserStaking_$7901_memory_ptr",
                              "typeString": "struct BitcrushNiceStaking.UserStaking memory"
                            }
                          },
                          "id": 8080,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberName": "shares",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 7898,
                          "src": "3503:11:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "id": 8081,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "3502:29:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint256_$__$__$__$__$__$__$__$__$",
                        "typeString": "tuple(uint256,,,,,,,,)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 8084,
                          "name": "_address",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8066,
                          "src": "3555:8:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 8082,
                          "name": "stakingPool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7890,
                          "src": "3534:11:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IStaking_$13372",
                            "typeString": "contract IStaking"
                          }
                        },
                        "id": 8083,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "stakings",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 13349,
                        "src": "3534:20:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                          "typeString": "function (address) external returns (uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
                        }
                      },
                      "id": 8085,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3534:30:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
                      }
                    },
                    "src": "3502:62:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8087,
                  "nodeType": "ExpressionStatement",
                  "src": "3502:62:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 8097,
                          "name": "user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8073,
                          "src": "3659:4:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserStaking_$7901_memory_ptr",
                            "typeString": "struct BitcrushNiceStaking.UserStaking memory"
                          }
                        },
                        "id": 8098,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "profitBaseline",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 7900,
                        "src": "3659:19:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "hexValue": "31653132",
                            "id": 8094,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3632:4:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000_by_1",
                              "typeString": "int_const 1000000000000"
                            },
                            "value": "1e12"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000000000_by_1",
                              "typeString": "int_const 1000000000000"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 8091,
                                "name": "accProfitPerShare",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7914,
                                "src": "3609:17:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "expression": {
                                  "id": 8088,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8073,
                                  "src": "3593:4:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserStaking_$7901_memory_ptr",
                                    "typeString": "struct BitcrushNiceStaking.UserStaking memory"
                                  }
                                },
                                "id": 8089,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "shares",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 7898,
                                "src": "3593:11:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 8090,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "mul",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 11558,
                              "src": "3593:15:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 8092,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3593:34:24",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8093,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11573,
                          "src": "3593:38:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3593:44:24",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 8096,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sub",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11543,
                      "src": "3593:48:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 8099,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3593:99:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 8070,
                  "id": 8100,
                  "nodeType": "Return",
                  "src": "3574:118:24"
                }
              ]
            },
            "documentation": {
              "id": 8064,
              "nodeType": "StructuredDocumentation",
              "src": "3204:162:24",
              "text": "Get pending Profits to Claim\n @param _address the user's wallet address to calculate profits\n @return pending Profits to be claimed by this user"
            },
            "functionSelector": "39cc1378",
            "id": 8102,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "pendingProfits",
            "nameLocation": "3380:14:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8067,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8066,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "3403:8:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 8102,
                  "src": "3395:16:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8065,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3395:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3394:18:24"
            },
            "returnParameters": {
              "id": 8070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8069,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 8102,
                  "src": "3429:7:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8068,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3429:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3428:9:24"
            },
            "scope": 8393,
            "src": "3371:328:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8296,
              "nodeType": "Block",
              "src": "3871:2005:24",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 8110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 8107,
                          "name": "lastAutoCompoundBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7912,
                          "src": "3902:21:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 8108,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "3927:5:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 8109,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "src": "3927:12:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3902:37:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "436f6d706f756e6420416c6c206e6f7420796574206170706c696361626c652e",
                        "id": 8111,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3953:34:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e06d1bbca2601492bfa2f90a28da7d5afcf07d65178a34a12d4bff205d648375",
                          "typeString": "literal_string \"Compound All not yet applicable.\""
                        },
                        "value": "Compound All not yet applicable."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e06d1bbca2601492bfa2f90a28da7d5afcf07d65178a34a12d4bff205d648375",
                          "typeString": "literal_string \"Compound All not yet applicable.\""
                        }
                      ],
                      "id": 8106,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3881:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3881:116:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8113,
                  "nodeType": "ExpressionStatement",
                  "src": "3881:116:24"
                },
                {
                  "assignments": [
                    8115
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8115,
                      "mutability": "mutable",
                      "name": "compounderReward",
                      "nameLocation": "4016:16:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8296,
                      "src": "4008:24:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8114,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4008:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8117,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 8116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4035:1:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4008:28:24"
                },
                {
                  "assignments": [
                    8119
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8119,
                      "mutability": "mutable",
                      "name": "batchStartingIndex",
                      "nameLocation": "4054:18:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8296,
                      "src": "4046:26:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8118,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4046:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8123,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 8120,
                        "name": "stakingPool",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7890,
                        "src": "4075:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$13372",
                          "typeString": "contract IStaking"
                        }
                      },
                      "id": 8121,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "batchStartingIndex",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13354,
                      "src": "4075:30:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$",
                        "typeString": "function () external returns (uint256)"
                      }
                    },
                    "id": 8122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4075:32:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4046:61:24"
                },
                {
                  "assignments": [
                    8125
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8125,
                      "mutability": "mutable",
                      "name": "indexesLength",
                      "nameLocation": "4125:13:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8296,
                      "src": "4117:21:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8124,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4117:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8129,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 8126,
                        "name": "stakingPool",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7890,
                        "src": "4141:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$13372",
                          "typeString": "contract IStaking"
                        }
                      },
                      "id": 8127,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "indexesLength",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13359,
                      "src": "4141:25:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$",
                        "typeString": "function () external returns (uint256)"
                      }
                    },
                    "id": 8128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4141:27:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4117:51:24"
                },
                {
                  "assignments": [
                    8131
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8131,
                      "mutability": "mutable",
                      "name": "autoCompundLimit",
                      "nameLocation": "4186:16:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8296,
                      "src": "4178:24:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8130,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4178:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8135,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 8132,
                        "name": "stakingPool",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7890,
                        "src": "4205:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$13372",
                          "typeString": "contract IStaking"
                        }
                      },
                      "id": 8133,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "autoCompoundLimit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13364,
                      "src": "4205:29:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_uint256_$",
                        "typeString": "function () external returns (uint256)"
                      }
                    },
                    "id": 8134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4205:31:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4178:58:24"
                },
                {
                  "assignments": [
                    8137
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8137,
                      "mutability": "mutable",
                      "name": "batchStart",
                      "nameLocation": "4255:10:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8296,
                      "src": "4247:18:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8136,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4247:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8139,
                  "initialValue": {
                    "id": 8138,
                    "name": "batchStartingIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8119,
                    "src": "4268:18:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4247:39:24"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 8142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 8140,
                      "name": "batchStartingIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8119,
                      "src": "4300:18:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 8141,
                      "name": "indexesLength",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8125,
                      "src": "4322:13:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4300:35:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 8147,
                  "nodeType": "IfStatement",
                  "src": "4296:55:24",
                  "trueBody": {
                    "expression": {
                      "id": 8145,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 8143,
                        "name": "batchStart",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8137,
                        "src": "4337:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "hexValue": "30",
                        "id": 8144,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4350:1:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "4337:14:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8146,
                    "nodeType": "ExpressionStatement",
                    "src": "4337:14:24"
                  }
                },
                {
                  "assignments": [
                    8149
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8149,
                      "mutability": "mutable",
                      "name": "batchLimit",
                      "nameLocation": "4370:10:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8296,
                      "src": "4362:18:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8148,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4362:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8151,
                  "initialValue": {
                    "id": 8150,
                    "name": "indexesLength",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8125,
                    "src": "4383:13:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4362:34:24"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 8161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 8154,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 8152,
                        "name": "indexesLength",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8125,
                        "src": "4423:13:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "id": 8153,
                        "name": "autoCompundLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8131,
                        "src": "4440:16:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4423:33:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 8160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [
                          {
                            "id": 8157,
                            "name": "autoCompundLimit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8131,
                            "src": "4487:16:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 8155,
                            "name": "batchStart",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8137,
                            "src": "4472:10:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11528,
                          "src": "4472:14:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8158,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4472:32:24",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "id": 8159,
                        "name": "indexesLength",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8125,
                        "src": "4508:13:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4472:49:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4423:98:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "expression": {
                      "id": 8171,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 8166,
                        "name": "batchLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8149,
                        "src": "4573:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "arguments": [
                          {
                            "id": 8169,
                            "name": "autoCompundLimit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8131,
                            "src": "4601:16:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 8167,
                            "name": "batchStart",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8137,
                            "src": "4586:10:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 8168,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11528,
                          "src": "4586:14:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 8170,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4586:32:24",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4573:45:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8172,
                    "nodeType": "ExpressionStatement",
                    "src": "4573:45:24"
                  },
                  "id": 8173,
                  "nodeType": "IfStatement",
                  "src": "4406:212:24",
                  "trueBody": {
                    "expression": {
                      "id": 8164,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 8162,
                        "name": "batchLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8149,
                        "src": "4532:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "id": 8163,
                        "name": "indexesLength",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8125,
                        "src": "4545:13:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4532:26:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8165,
                    "nodeType": "ExpressionStatement",
                    "src": "4532:26:24"
                  }
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 8174,
                      "name": "updateProfits",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8063,
                      "src": "4629:13:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 8175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4629:15:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8176,
                  "nodeType": "ExpressionStatement",
                  "src": "4629:15:24"
                },
                {
                  "body": {
                    "id": 8276,
                    "nodeType": "Block",
                    "src": "4704:1027:24",
                    "statements": [
                      {
                        "assignments": [
                          8188
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 8188,
                            "mutability": "mutable",
                            "name": "currentAddress",
                            "nameLocation": "4726:14:24",
                            "nodeType": "VariableDeclaration",
                            "scope": 8276,
                            "src": "4718:22:24",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 8187,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4718:7:24",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 8193,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 8191,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8178,
                              "src": "4770:1:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 8189,
                              "name": "stakingPool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7890,
                              "src": "4743:11:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStaking_$13372",
                                "typeString": "contract IStaking"
                              }
                            },
                            "id": 8190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "addressIndexes",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13371,
                            "src": "4743:26:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) external returns (address)"
                            }
                          },
                          "id": 8192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4743:29:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4718:54:24"
                      },
                      {
                        "assignments": [
                          8196
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 8196,
                            "mutability": "mutable",
                            "name": "currentUser",
                            "nameLocation": "4806:11:24",
                            "nodeType": "VariableDeclaration",
                            "scope": 8276,
                            "src": "4786:31:24",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                              "typeString": "struct BitcrushNiceStaking.UserStaking"
                            },
                            "typeName": {
                              "id": 8195,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 8194,
                                "name": "UserStaking",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 7901,
                                "src": "4786:11:24"
                              },
                              "referencedDeclaration": 7901,
                              "src": "4786:11:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                                "typeString": "struct BitcrushNiceStaking.UserStaking"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 8200,
                        "initialValue": {
                          "baseExpression": {
                            "id": 8197,
                            "name": "stakings",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7906,
                            "src": "4820:8:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserStaking_$7901_storage_$",
                              "typeString": "mapping(address => struct BitcrushNiceStaking.UserStaking storage ref)"
                            }
                          },
                          "id": 8199,
                          "indexExpression": {
                            "id": 8198,
                            "name": "currentAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8188,
                            "src": "4829:14:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4820:24:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserStaking_$7901_storage",
                            "typeString": "struct BitcrushNiceStaking.UserStaking storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4786:58:24"
                      },
                      {
                        "expression": {
                          "id": 8209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "components": [
                              {
                                "expression": {
                                  "id": 8201,
                                  "name": "currentUser",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8196,
                                  "src": "4859:11:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                                    "typeString": "struct BitcrushNiceStaking.UserStaking storage pointer"
                                  }
                                },
                                "id": 8203,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberName": "shares",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 7898,
                                "src": "4859:18:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null
                            ],
                            "id": 8204,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "4858:36:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$__$__$__$__$__$__$__$__$",
                              "typeString": "tuple(uint256,,,,,,,,)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 8207,
                                "name": "currentAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8188,
                                "src": "4935:14:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 8205,
                                "name": "stakingPool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7890,
                                "src": "4897:11:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IStaking_$13372",
                                  "typeString": "contract IStaking"
                                }
                              },
                              "id": 8206,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakings",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 13349,
                              "src": "4897:20:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                                "typeString": "function (address) external returns (uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
                              }
                            },
                            "id": 8208,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4897:66:24",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
                            }
                          },
                          "src": "4858:105:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 8210,
                        "nodeType": "ExpressionStatement",
                        "src": "4858:105:24"
                      },
                      {
                        "assignments": [
                          8212
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 8212,
                            "mutability": "mutable",
                            "name": "stakerReward",
                            "nameLocation": "4986:12:24",
                            "nodeType": "VariableDeclaration",
                            "scope": 8276,
                            "src": "4978:20:24",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 8211,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4978:7:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 8225,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 8222,
                                "name": "currentUser",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8196,
                                "src": "5125:11:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                                  "typeString": "struct BitcrushNiceStaking.UserStaking storage pointer"
                                }
                              },
                              "id": 8223,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "profitBaseline",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 7900,
                              "src": "5125:26:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "hexValue": "31653132",
                                  "id": 8219,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5098:4:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000000000_by_1",
                                    "typeString": "int_const 1000000000000"
                                  },
                                  "value": "1e12"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_1000000000000_by_1",
                                    "typeString": "int_const 1000000000000"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 8216,
                                      "name": "accProfitPerShare",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7914,
                                      "src": "5058:17:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 8213,
                                        "name": "currentUser",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 8196,
                                        "src": "5001:11:24",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                                          "typeString": "struct BitcrushNiceStaking.UserStaking storage pointer"
                                        }
                                      },
                                      "id": 8214,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "shares",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 7898,
                                      "src": "5001:35:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 8215,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 11558,
                                    "src": "5001:56:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 8217,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5001:75:24",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 8218,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 11573,
                                "src": "5001:96:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 8220,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5001:102:24",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 8221,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 11543,
                            "src": "5001:123:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 8224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5001:151:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4978:174:24"
                      },
                      {
                        "expression": {
                          "id": 8234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 8226,
                              "name": "currentUser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8196,
                              "src": "5166:11:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                                "typeString": "struct BitcrushNiceStaking.UserStaking storage pointer"
                              }
                            },
                            "id": 8228,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "profitBaseline",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7900,
                            "src": "5166:26:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 8232,
                                "name": "stakerReward",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8212,
                                "src": "5243:12:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "expression": {
                                  "id": 8229,
                                  "name": "currentUser",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8196,
                                  "src": "5195:11:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserStaking_$7901_storage_ptr",
                                    "typeString": "struct BitcrushNiceStaking.UserStaking storage pointer"
                                  }
                                },
                                "id": 8230,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "profitBaseline",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 7900,
                                "src": "5195:26:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 8231,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 11528,
                              "src": "5195:30:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 8233,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5195:74:24",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5166:103:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 8235,
                        "nodeType": "ExpressionStatement",
                        "src": "5166:103:24"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 8238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 8236,
                            "name": "stakerReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8212,
                            "src": "5288:12:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 8237,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5303:1:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5288:16:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 8275,
                        "nodeType": "IfStatement",
                        "src": "5284:437:24",
                        "trueBody": {
                          "id": 8274,
                          "nodeType": "Block",
                          "src": "5306:415:24",
                          "statements": [
                            {
                              "assignments": [
                                8240
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 8240,
                                  "mutability": "mutable",
                                  "name": "cpAllReward",
                                  "nameLocation": "5332:11:24",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 8274,
                                  "src": "5324:19:24",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 8239,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5324:7:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 8248,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 8246,
                                    "name": "divisor",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 7885,
                                    "src": "5435:7:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 8243,
                                        "name": "performanceFeeCompounder",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 7879,
                                        "src": "5384:24:24",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 8241,
                                        "name": "stakerReward",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 8212,
                                        "src": "5346:12:24",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 8242,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "mul",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 11558,
                                      "src": "5346:37:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 8244,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5346:63:24",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 8245,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "div",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 11573,
                                  "src": "5346:88:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 8247,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5346:97:24",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5324:119:24"
                            },
                            {
                              "expression": {
                                "id": 8254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 8249,
                                  "name": "compounderReward",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8115,
                                  "src": "5461:16:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 8252,
                                      "name": "cpAllReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 8240,
                                      "src": "5501:11:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 8250,
                                      "name": "compounderReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 8115,
                                      "src": "5480:16:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 8251,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 11528,
                                    "src": "5480:20:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 8253,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5480:33:24",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5461:52:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 8255,
                              "nodeType": "ExpressionStatement",
                              "src": "5461:52:24"
                            },
                            {
                              "expression": {
                                "id": 8261,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 8256,
                                  "name": "stakerReward",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 8212,
                                  "src": "5531:12:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 8259,
                                      "name": "cpAllReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 8240,
                                      "src": "5563:11:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 8257,
                                      "name": "stakerReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 8212,
                                      "src": "5546:12:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 8258,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 11543,
                                    "src": "5546:16:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 8260,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5546:29:24",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5531:44:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 8262,
                              "nodeType": "ExpressionStatement",
                              "src": "5531:44:24"
                            },
                            {
                              "expression": {
                                "id": 8272,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 8263,
                                    "name": "niceRewards",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 7910,
                                    "src": "5593:11:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 8265,
                                  "indexExpression": {
                                    "id": 8264,
                                    "name": "currentAddress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 8188,
                                    "src": "5605:14:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "5593:27:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 8270,
                                      "name": "stakerReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 8212,
                                      "src": "5676:12:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "baseExpression": {
                                        "id": 8266,
                                        "name": "niceRewards",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 7910,
                                        "src": "5623:11:24",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                          "typeString": "mapping(address => uint256)"
                                        }
                                      },
                                      "id": 8268,
                                      "indexExpression": {
                                        "id": 8267,
                                        "name": "currentAddress",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 8188,
                                        "src": "5635:14:24",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "5623:27:24",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 8269,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 11528,
                                    "src": "5623:31:24",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 8271,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5623:83:24",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5593:113:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 8273,
                              "nodeType": "ExpressionStatement",
                              "src": "5593:113:24"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 8183,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 8181,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8178,
                      "src": "4683:1:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 8182,
                      "name": "batchLimit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8149,
                      "src": "4687:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4683:14:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 8277,
                  "initializationExpression": {
                    "assignments": [
                      8178
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 8178,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "4667:1:24",
                        "nodeType": "VariableDeclaration",
                        "scope": 8277,
                        "src": "4659:9:24",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 8177,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4659:7:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 8180,
                    "initialValue": {
                      "id": 8179,
                      "name": "batchStart",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8137,
                      "src": "4671:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "4659:22:24"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 8185,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "4699:3:24",
                      "subExpression": {
                        "id": 8184,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8178,
                        "src": "4699:1:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8186,
                    "nodeType": "ExpressionStatement",
                    "src": "4699:3:24"
                  },
                  "nodeType": "ForStatement",
                  "src": "4654:1077:24"
                },
                {
                  "expression": {
                    "id": 8281,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 8278,
                      "name": "lastAutoCompoundBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7912,
                      "src": "5741:21:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 8279,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "5765:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 8280,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "number",
                      "nodeType": "MemberAccess",
                      "src": "5765:12:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5741:36:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8282,
                  "nodeType": "ExpressionStatement",
                  "src": "5741:36:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 8286,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5805:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5805:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 8288,
                        "name": "compounderReward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8115,
                        "src": "5817:16:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 8283,
                        "name": "nice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7896,
                        "src": "5787:4:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$12374",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 8285,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11159,
                      "src": "5787:17:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$12374_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$12374_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 8289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5787:47:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8290,
                  "nodeType": "ExpressionStatement",
                  "src": "5787:47:24"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 8291,
                        "name": "stakingPool",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7890,
                        "src": "5844:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$13372",
                          "typeString": "contract IStaking"
                        }
                      },
                      "id": 8293,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "compoundAll",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13321,
                      "src": "5844:23:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                        "typeString": "function () external"
                      }
                    },
                    "id": 8294,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5844:25:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8295,
                  "nodeType": "ExpressionStatement",
                  "src": "5844:25:24"
                }
              ]
            },
            "documentation": {
              "id": 8103,
              "nodeType": "StructuredDocumentation",
              "src": "3705:131:24",
              "text": "compounds the rewards of all users in the pool\n @dev compounds the rewards of all users in the pool while deducting fees"
            },
            "functionSelector": "9b05ddb3",
            "id": 8297,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "compoundAll",
            "nameLocation": "3850:11:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8104,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3861:2:24"
            },
            "returnParameters": {
              "id": 8105,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3871:0:24"
            },
            "scope": 8393,
            "src": "3841:2035:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8333,
              "nodeType": "Block",
              "src": "6019:211:24",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 8307,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 8302,
                            "name": "niceRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7910,
                            "src": "6037:11:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 8305,
                          "indexExpression": {
                            "expression": {
                              "id": 8303,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "6049:3:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 8304,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6049:10:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6037:23:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 8306,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6063:1:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6037:27:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f207265776172647320617661696c61626c65",
                        "id": 8308,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6066:22:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_893728d0e71b0800df2adedc4ebc96c8ebb7f6a47f5b7d4635aabadfc4a61040",
                          "typeString": "literal_string \"No rewards available\""
                        },
                        "value": "No rewards available"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_893728d0e71b0800df2adedc4ebc96c8ebb7f6a47f5b7d4635aabadfc4a61040",
                          "typeString": "literal_string \"No rewards available\""
                        }
                      ],
                      "id": 8301,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6029:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8309,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6029:60:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8310,
                  "nodeType": "ExpressionStatement",
                  "src": "6029:60:24"
                },
                {
                  "assignments": [
                    8312
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8312,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "6107:6:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8333,
                      "src": "6099:14:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8311,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6099:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8317,
                  "initialValue": {
                    "baseExpression": {
                      "id": 8313,
                      "name": "niceRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7910,
                      "src": "6116:11:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 8316,
                    "indexExpression": {
                      "expression": {
                        "id": 8314,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "6128:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 8315,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "6128:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6116:23:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6099:40:24"
                },
                {
                  "expression": {
                    "id": 8323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 8318,
                        "name": "niceRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7910,
                        "src": "6149:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 8321,
                      "indexExpression": {
                        "expression": {
                          "id": 8319,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6161:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8320,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6161:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6149:23:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 8322,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6175:1:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "6149:27:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8324,
                  "nodeType": "ExpressionStatement",
                  "src": "6149:27:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 8328,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6204:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8329,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6204:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 8330,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8312,
                        "src": "6216:6:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 8325,
                        "name": "nice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7896,
                        "src": "6186:4:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$12374",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 8327,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11159,
                      "src": "6186:17:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$12374_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$12374_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 8331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6186:37:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8332,
                  "nodeType": "ExpressionStatement",
                  "src": "6186:37:24"
                }
              ]
            },
            "documentation": {
              "id": 8298,
              "nodeType": "StructuredDocumentation",
              "src": "5882:94:24",
              "text": "withdraw funds of users\n @dev transfer all available funds of users to users wallet"
            },
            "functionSelector": "37ab5796",
            "id": 8334,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawNiceRewards",
            "nameLocation": "5990:19:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8299,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6009:2:24"
            },
            "returnParameters": {
              "id": 8300,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6019:0:24"
            },
            "scope": 8393,
            "src": "5981:249:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8364,
              "nodeType": "Block",
              "src": "6446:209:24",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 8345,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 8343,
                          "name": "_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8337,
                          "src": "6464:4:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 8344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6471:1:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6464:8:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466565206d7573742062652067726561746572207468616e2030",
                        "id": 8346,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6474:28:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_355e3e1237dd83e0cd55d59558596419e6c0816f1d9486eec0e3921947181494",
                          "typeString": "literal_string \"Fee must be greater than 0\""
                        },
                        "value": "Fee must be greater than 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_355e3e1237dd83e0cd55d59558596419e6c0816f1d9486eec0e3921947181494",
                          "typeString": "literal_string \"Fee must be greater than 0\""
                        }
                      ],
                      "id": 8342,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6456:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8347,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6456:47:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8348,
                  "nodeType": "ExpressionStatement",
                  "src": "6456:47:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 8352,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 8350,
                          "name": "_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8337,
                          "src": "6521:4:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 8351,
                          "name": "MAX_FEE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7882,
                          "src": "6528:7:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6521:14:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466565206d757374206265206c657373207468616e20313025",
                        "id": 8353,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6537:27:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b9e03c23ecd8e6460421d7fca7c50870b7c8deb1c11514da6300999d9e697d22",
                          "typeString": "literal_string \"Fee must be less than 10%\""
                        },
                        "value": "Fee must be less than 10%"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b9e03c23ecd8e6460421d7fca7c50870b7c8deb1c11514da6300999d9e697d22",
                          "typeString": "literal_string \"Fee must be less than 10%\""
                        }
                      ],
                      "id": 8349,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6513:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8354,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6513:52:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8355,
                  "nodeType": "ExpressionStatement",
                  "src": "6513:52:24"
                },
                {
                  "expression": {
                    "id": 8358,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 8356,
                      "name": "performanceFeeCompounder",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7879,
                      "src": "6575:24:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 8357,
                      "name": "_fee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8337,
                      "src": "6602:4:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6575:31:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8359,
                  "nodeType": "ExpressionStatement",
                  "src": "6575:31:24"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 8361,
                        "name": "_fee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8337,
                        "src": "6643:4:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 8360,
                      "name": "PerformanceFeeUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7922,
                      "src": "6621:21:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 8362,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6621:27:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8363,
                  "nodeType": "EmitStatement",
                  "src": "6616:32:24"
                }
              ]
            },
            "documentation": {
              "id": 8335,
              "nodeType": "StructuredDocumentation",
              "src": "6236:137:24",
              "text": "Store `_fee`.\n @param _fee the new value to store\n @dev stores the fee in the state variable `performanceFeeCompounder`"
            },
            "functionSelector": "26cba336",
            "id": 8365,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 8340,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 8339,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11070,
                  "src": "6436:9:24"
                },
                "nodeType": "ModifierInvocation",
                "src": "6436:9:24"
              }
            ],
            "name": "setPerformanceFeeCompounder",
            "nameLocation": "6387:27:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8337,
                  "mutability": "mutable",
                  "name": "_fee",
                  "nameLocation": "6423:4:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 8365,
                  "src": "6415:12:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8336,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6415:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6414:14:24"
            },
            "returnParameters": {
              "id": 8341,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6446:0:24"
            },
            "scope": 8393,
            "src": "6378:277:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 8391,
              "nodeType": "Block",
              "src": "6806:141:24",
              "statements": [
                {
                  "assignments": [
                    8370
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 8370,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "6824:6:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 8391,
                      "src": "6816:14:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 8369,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6816:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 8375,
                  "initialValue": {
                    "baseExpression": {
                      "id": 8371,
                      "name": "niceRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7910,
                      "src": "6833:11:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 8374,
                    "indexExpression": {
                      "expression": {
                        "id": 8372,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "6845:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 8373,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "6845:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6833:23:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6816:40:24"
                },
                {
                  "expression": {
                    "id": 8381,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 8376,
                        "name": "niceRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7910,
                        "src": "6866:11:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 8379,
                      "indexExpression": {
                        "expression": {
                          "id": 8377,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6878:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8378,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6878:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6866:23:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 8380,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6892:1:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "6866:27:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8382,
                  "nodeType": "ExpressionStatement",
                  "src": "6866:27:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 8386,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6921:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 8387,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6921:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 8388,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8370,
                        "src": "6933:6:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 8383,
                        "name": "nice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7896,
                        "src": "6903:4:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$12374",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 8385,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11159,
                      "src": "6903:17:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$12374_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$12374_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 8389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6903:37:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8390,
                  "nodeType": "ExpressionStatement",
                  "src": "6903:37:24"
                }
              ]
            },
            "documentation": {
              "id": 8366,
              "nodeType": "StructuredDocumentation",
              "src": "6661:104:24",
              "text": "emergency withdraw funds of users\n @dev transfer all available funds of users to users wallet"
            },
            "functionSelector": "db2e21bc",
            "id": 8392,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyWithdraw",
            "nameLocation": "6779:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8367,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6796:2:24"
            },
            "returnParameters": {
              "id": 8368,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6806:0:24"
            },
            "scope": 8393,
            "src": "6770:177:24",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 8394,
        "src": "326:6623:24",
        "usedErrors": []
      }
    ],
    "src": "31:6919:24"
  },
  "bytecode": "60a0604052600a60015534801561001557600080fd5b5060405161153e38038061153e833981016040819052610034916100a2565b61003d33610052565b6001600160a01b031660805242600a556100d2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100b457600080fd5b81516001600160a01b03811681146100cb57600080fd5b9392505050565b6080516114436100fb60003960008181610272015281816106090152610cf401526114436000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063668579c9116100de578063b249e88e11610097578063db2e21bc11610071578063db2e21bc146102ca578063dc6e13e1146102d2578063f2fde38b1461030e578063fb7773641461032157600080fd5b8063b249e88e146102af578063bc063e1a146102b8578063bca5503d146102c157600080fd5b8063668579c91461024b578063715018a6146102545780638da5cb5b1461025c57806392cc410a1461026d5780639b05ddb314610294578063ac78012c1461029c57600080fd5b80633028f63a116101305780633028f63a1461020357806337ab57961461021657806339cc13781461021e5780633e0dc34e146102315780634bf211b81461023a57806351496bbd1461024357600080fd5b80630c56ae3b146101785780630c616882146101a85780631f2dc5ef146101bd5780632533830a146101d457806326cba336146101dd5780632aabc592146101f0575b600080fd5b60035461018b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bb6101b63660046111c1565b610341565b005b6101c661271081565b60405190815260200161019f565b6101c660095481565b6101bb6101eb3660046111de565b6103ef565b60045461018b906001600160a01b031681565b6101bb6102113660046111c1565b6104f6565b6101bb61059b565b6101c661022c3660046111c1565b61063b565b6101c660025481565b6101c660075481565b6101bb61071a565b6101c6600a5481565b6101bb6108c2565b6000546001600160a01b031661018b565b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6101bb6108f8565b6101bb6102aa3660046111de565b610d8b565b6101c660085481565b6101c66103e881565b6101c660015481565b6101bb6105ee565b6102f96102e03660046111c1565b6005602052600090815260409020805460019091015482565b6040805192835260208301919091520161019f565b6101bb61031c3660046111c1565b610dea565b6101c661032f3660046111c1565b60066020526000908152604090205481565b6000546001600160a01b031633146103745760405162461bcd60e51b815260040161036b906111f7565b60405180910390fd5b6004546001600160a01b0316156103cd5760405162461bcd60e51b815260206004820181905260248201527f7374616b696e6720706f6f6c206164647265737320616c726561647920736574604482015260640161036b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104195760405162461bcd60e51b815260040161036b906111f7565b600081116104695760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e2030000000000000604482015260640161036b565b6103e881106104ba5760405162461bcd60e51b815260206004820152601960248201527f466565206d757374206265206c657373207468616e2031302500000000000000604482015260640161036b565b60018190556040518181527f9b49d0cd76012d9c67241c2f68f836efbaf50ea29901a250040671402d5263f5906020015b60405180910390a150565b6000546001600160a01b031633146105205760405162461bcd60e51b815260040161036b906111f7565b6003546001600160a01b0316156105795760405162461bcd60e51b815260206004820181905260248201527f7374616b696e6720706f6f6c206164647265737320616c726561647920736574604482015260640161036b565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600660205260409020546105ee5760405162461bcd60e51b81526020600482015260146024820152734e6f207265776172647320617661696c61626c6560601b604482015260640161036b565b336000818152600660205260408120805491905590610638907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610e82565b50565b6001600160a01b038181166000818152600560209081526040808320815180830183528154815260019091015492810192909252600354905163dc6e13e160e01b815260048101949094529193909291169063dc6e13e190602401610120604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da919061122c565b50505085875250505060208401516008546107139491935061070d925064e8d4a510009161070791610ed9565b90610ee5565b90610ef1565b9392505050565b600360009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af115801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190611295565b61079957565b60048054600254604051634828ced960e01b8152928301526000916001600160a01b0390911690634828ced9906024016020604051808303816000875af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190611295565b9050806108165750565b6009546108239082610efd565b60095560035460408051633a98ef3960e01b815290516000926108ab926001600160a01b0390911691633a98ef3991600480820192602092909190829003018188875af1158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611295565b6107078464e8d4a51000610ed9565b6008549091506108bb9082610efd565b6008555050565b6000546001600160a01b031633146108ec5760405162461bcd60e51b815260040161036b906111f7565b6108f66000610f09565b565b43600754111561094a5760405162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6420416c6c206e6f7420796574206170706c696361626c652e604482015260640161036b565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166338ed019a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190611295565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663289bac076040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190611295565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663ecb1c9246040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac09190611295565b905082828110610ace575060005b828281111580610ae7575083610ae48385610efd565b10155b15610af3575082610b00565b610afd8284610efd565b90505b610b0861071a565b815b81811015610ce257600354604051635832d57160e01b8152600481018390526000916001600160a01b031690635832d571906024016020604051808303816000875af1158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8291906112ae565b6001600160a01b0381811660008181526005602052604090819020600354915163dc6e13e160e01b815260048101939093529394509091169063dc6e13e190602401610120604051808303816000875af1158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c08919061122c565b5050508587555050506001840154600854600094610c39945091925061070d9164e8d4a51000916107079190610ed9565b6001830154909150610c4b9082610efd565b60018301558015610ccc576000610c7361271061070760015485610ed990919063ffffffff16565b9050610c7f8b82610efd565b9a50610c8b8282610ef1565b6001600160a01b038516600090815260066020526040902054909250610cb19083610efd565b6001600160a01b038516600090815260066020526040902055505b5050508080610cda906112e1565b915050610b0a565b5043600755610d1b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163388610e82565b600360009054906101000a90046001600160a01b03166001600160a01b0316639b05ddb36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d6b57600080fd5b505af1158015610d7f573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b03163314610db55760405162461bcd60e51b815260040161036b906111f7565b60028190556040518181527f62aeae90d89735cc89a299ecb77480c7ed88f04481174a37ee38b11dc60515f7906020016104eb565b6000546001600160a01b03163314610e145760405162461bcd60e51b815260040161036b906111f7565b6001600160a01b038116610e795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161036b565b61063881610f09565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ed4908490610f59565b505050565b600061071382846112fc565b6000610713828461131b565b6000610713828461133d565b60006107138284611354565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610fae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661102b9092919063ffffffff16565b805190915015610ed45780806020019051810190610fcc919061136c565b610ed45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161036b565b606061103a8484600085611042565b949350505050565b6060824710156110a35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161036b565b6001600160a01b0385163b6110fa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036b565b600080866001600160a01b0316858760405161111691906113be565b60006040518083038185875af1925050503d8060008114611153576040519150601f19603f3d011682016040523d82523d6000602084013e611158565b606091505b5091509150611168828286611173565b979650505050505050565b60608315611182575081610713565b8251156111925782518084602001fd5b8160405162461bcd60e51b815260040161036b91906113da565b6001600160a01b038116811461063857600080fd5b6000602082840312156111d357600080fd5b8135610713816111ac565b6000602082840312156111f057600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008060008060008060008060006101208a8c03121561124b57600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b6000602082840312156112a757600080fd5b5051919050565b6000602082840312156112c057600080fd5b8151610713816111ac565b634e487b7160e01b600052601160045260246000fd5b60006000198214156112f5576112f56112cb565b5060010190565b6000816000190483118215151615611316576113166112cb565b500290565b60008261133857634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561134f5761134f6112cb565b500390565b60008219821115611367576113676112cb565b500190565b60006020828403121561137e57600080fd5b8151801515811461071357600080fd5b60005b838110156113a9578181015183820152602001611391565b838111156113b8576000848401525b50505050565b600082516113d081846020870161138e565b9190910192915050565b60208152600082518060208401526113f981604085016020870161138e565b601f01601f1916919091016040019291505056fea2646970667358221220499321630e36dc6d77710a97dc043b1cf063affecc9202b582f104eff737cf4164736f6c634300080c0033",
  "bytecodeSha1": "03fcc8e1cdc0ad6419dbef79d2459bc3514d01ef",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "BitcrushNiceStaking",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "65": [
            2006,
            2028,
            true
          ]
        }
      },
      "1": {},
      "11": {
        "Address.functionCallWithValue": {
          "62": [
            5145,
            5175,
            true
          ]
        },
        "Address.verifyCallResult": {
          "63": [
            7735,
            7742,
            false
          ],
          "64": [
            7876,
            7897,
            false
          ]
        }
      },
      "12": {},
      "16": {},
      "21": {},
      "23": {},
      "24": {
        "BitcrushNiceStaking.compoundAll": {
          "57": [
            3902,
            3939,
            true
          ],
          "58": [
            4300,
            4335,
            false
          ],
          "59": [
            4423,
            4456,
            true
          ],
          "60": [
            4472,
            4521,
            false
          ],
          "61": [
            5288,
            5304,
            false
          ]
        },
        "BitcrushNiceStaking.setGalacticChef": {
          "52": [
            2089,
            2126,
            true
          ]
        },
        "BitcrushNiceStaking.setPerformanceFeeCompounder": {
          "53": [
            6464,
            6472,
            true
          ],
          "54": [
            6521,
            6535,
            true
          ]
        },
        "BitcrushNiceStaking.setStakingPool": {
          "55": [
            1683,
            1719,
            true
          ]
        },
        "BitcrushNiceStaking.updateProfits": {
          "56": [
            2910,
            2931,
            false
          ]
        }
      },
      "29": {},
      "3": {},
      "32": {},
      "6": {
        "SafeERC20._callOptionalReturn": {
          "66": [
            3735,
            3756,
            false
          ],
          "67": [
            3819,
            3849,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Ownable._transferOwnership": {
          "42": [
            2378,
            2395
          ],
          "43": [
            2405,
            2450
          ]
        },
        "Ownable.owner": {
          "0": [
            1101,
            1114
          ]
        },
        "Ownable.renounceOwnership": {
          "18": [
            1732,
            1762
          ]
        },
        "Ownable.transferOwnership": {
          "35": [
            1998,
            2071
          ],
          "36": [
            2081,
            2109
          ]
        }
      },
      "1": {},
      "11": {
        "Address.functionCall": {
          "45": [
            4018,
            4077
          ]
        },
        "Address.functionCallWithValue": {
          "46": [
            5137,
            5218
          ],
          "48": [
            5228,
            5288
          ],
          "49": [
            5382,
            5440
          ]
        },
        "Address.isContract": {
          "47": [
            1458,
            1488
          ]
        },
        "Address.verifyCallResult": {
          "50": [
            7758,
            7775
          ],
          "51": [
            8202,
            8222
          ]
        }
      },
      "12": {
        "Context._msgSender": {
          "1": [
            712,
            729
          ]
        }
      },
      "16": {
        "SafeMath.add": {
          "41": [
            2818,
            2830
          ]
        },
        "SafeMath.div": {
          "39": [
            3913,
            3925
          ]
        },
        "SafeMath.mul": {
          "38": [
            3528,
            3540
          ]
        },
        "SafeMath.sub": {
          "40": [
            3185,
            3197
          ]
        }
      },
      "21": {},
      "23": {},
      "24": {
        "BitcrushNiceStaking.compoundAll": {
          "19": [
            3881,
            3997
          ],
          "20": [
            4337,
            4351
          ],
          "21": [
            4532,
            4558
          ],
          "22": [
            4573,
            4618
          ],
          "23": [
            4629,
            4644
          ],
          "24": [
            4858,
            4963
          ],
          "25": [
            5166,
            5269
          ],
          "26": [
            5461,
            5513
          ],
          "27": [
            5531,
            5575
          ],
          "28": [
            5593,
            5706
          ],
          "29": [
            4699,
            4702
          ],
          "30": [
            5741,
            5777
          ],
          "31": [
            5787,
            5834
          ],
          "32": [
            5844,
            5869
          ]
        },
        "BitcrushNiceStaking.pendingProfits": {
          "13": [
            3502,
            3564
          ],
          "14": [
            3574,
            3692
          ]
        },
        "BitcrushNiceStaking.setGalacticChef": {
          "2": [
            2068,
            2184
          ],
          "3": [
            2194,
            2222
          ]
        },
        "BitcrushNiceStaking.setPerformanceFeeCompounder": {
          "4": [
            6456,
            6503
          ],
          "5": [
            6513,
            6565
          ],
          "6": [
            6575,
            6606
          ],
          "7": [
            6616,
            6648
          ]
        },
        "BitcrushNiceStaking.setPoolId": {
          "33": [
            2440,
            2456
          ],
          "34": [
            2466,
            2493
          ]
        },
        "BitcrushNiceStaking.setStakingPool": {
          "8": [
            1662,
            1777
          ],
          "9": [
            1787,
            1809
          ]
        },
        "BitcrushNiceStaking.updateProfits": {
          "15": [
            2933,
            2940
          ],
          "16": [
            2949,
            3018
          ],
          "17": [
            3138,
            3191
          ]
        },
        "BitcrushNiceStaking.withdrawNiceRewards": {
          "10": [
            6029,
            6089
          ],
          "11": [
            6149,
            6176
          ],
          "12": [
            6186,
            6223
          ]
        }
      },
      "29": {},
      "3": {},
      "32": {},
      "6": {
        "SafeERC20._callOptionalReturn": {
          "44": [
            3811,
            3896
          ]
        },
        "SafeERC20.safeTransfer": {
          "37": [
            813,
            899
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Address",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Context",
    "GalacticChef",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/IERC20",
    "IFeeDistributor",
    "IStaking",
    "NICEToken",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/ReentrancyGuard",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/SafeERC20",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/SafeMath"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106101735760003560e01c8063668579c9116100de578063b249e88e11610097578063db2e21bc11610071578063db2e21bc146102ca578063dc6e13e1146102d2578063f2fde38b1461030e578063fb7773641461032157600080fd5b8063b249e88e146102af578063bc063e1a146102b8578063bca5503d146102c157600080fd5b8063668579c91461024b578063715018a6146102545780638da5cb5b1461025c57806392cc410a1461026d5780639b05ddb314610294578063ac78012c1461029c57600080fd5b80633028f63a116101305780633028f63a1461020357806337ab57961461021657806339cc13781461021e5780633e0dc34e146102315780634bf211b81461023a57806351496bbd1461024357600080fd5b80630c56ae3b146101785780630c616882146101a85780631f2dc5ef146101bd5780632533830a146101d457806326cba336146101dd5780632aabc592146101f0575b600080fd5b60035461018b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bb6101b63660046111c1565b610341565b005b6101c661271081565b60405190815260200161019f565b6101c660095481565b6101bb6101eb3660046111de565b6103ef565b60045461018b906001600160a01b031681565b6101bb6102113660046111c1565b6104f6565b6101bb61059b565b6101c661022c3660046111c1565b61063b565b6101c660025481565b6101c660075481565b6101bb61071a565b6101c6600a5481565b6101bb6108c2565b6000546001600160a01b031661018b565b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6101bb6108f8565b6101bb6102aa3660046111de565b610d8b565b6101c660085481565b6101c66103e881565b6101c660015481565b6101bb6105ee565b6102f96102e03660046111c1565b6005602052600090815260409020805460019091015482565b6040805192835260208301919091520161019f565b6101bb61031c3660046111c1565b610dea565b6101c661032f3660046111c1565b60066020526000908152604090205481565b6000546001600160a01b031633146103745760405162461bcd60e51b815260040161036b906111f7565b60405180910390fd5b6004546001600160a01b0316156103cd5760405162461bcd60e51b815260206004820181905260248201527f7374616b696e6720706f6f6c206164647265737320616c726561647920736574604482015260640161036b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104195760405162461bcd60e51b815260040161036b906111f7565b600081116104695760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e2030000000000000604482015260640161036b565b6103e881106104ba5760405162461bcd60e51b815260206004820152601960248201527f466565206d757374206265206c657373207468616e2031302500000000000000604482015260640161036b565b60018190556040518181527f9b49d0cd76012d9c67241c2f68f836efbaf50ea29901a250040671402d5263f5906020015b60405180910390a150565b6000546001600160a01b031633146105205760405162461bcd60e51b815260040161036b906111f7565b6003546001600160a01b0316156105795760405162461bcd60e51b815260206004820181905260248201527f7374616b696e6720706f6f6c206164647265737320616c726561647920736574604482015260640161036b565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600660205260409020546105ee5760405162461bcd60e51b81526020600482015260146024820152734e6f207265776172647320617661696c61626c6560601b604482015260640161036b565b336000818152600660205260408120805491905590610638907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610e82565b50565b6001600160a01b038181166000818152600560209081526040808320815180830183528154815260019091015492810192909252600354905163dc6e13e160e01b815260048101949094529193909291169063dc6e13e190602401610120604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da919061122c565b50505085875250505060208401516008546107139491935061070d925064e8d4a510009161070791610ed9565b90610ee5565b90610ef1565b9392505050565b600360009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af115801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190611295565b61079957565b60048054600254604051634828ced960e01b8152928301526000916001600160a01b0390911690634828ced9906024016020604051808303816000875af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190611295565b9050806108165750565b6009546108239082610efd565b60095560035460408051633a98ef3960e01b815290516000926108ab926001600160a01b0390911691633a98ef3991600480820192602092909190829003018188875af1158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611295565b6107078464e8d4a51000610ed9565b6008549091506108bb9082610efd565b6008555050565b6000546001600160a01b031633146108ec5760405162461bcd60e51b815260040161036b906111f7565b6108f66000610f09565b565b43600754111561094a5760405162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6420416c6c206e6f7420796574206170706c696361626c652e604482015260640161036b565b600080600360009054906101000a90046001600160a01b03166001600160a01b03166338ed019a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190611295565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663289bac076040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190611295565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663ecb1c9246040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac09190611295565b905082828110610ace575060005b828281111580610ae7575083610ae48385610efd565b10155b15610af3575082610b00565b610afd8284610efd565b90505b610b0861071a565b815b81811015610ce257600354604051635832d57160e01b8152600481018390526000916001600160a01b031690635832d571906024016020604051808303816000875af1158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8291906112ae565b6001600160a01b0381811660008181526005602052604090819020600354915163dc6e13e160e01b815260048101939093529394509091169063dc6e13e190602401610120604051808303816000875af1158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c08919061122c565b5050508587555050506001840154600854600094610c39945091925061070d9164e8d4a51000916107079190610ed9565b6001830154909150610c4b9082610efd565b60018301558015610ccc576000610c7361271061070760015485610ed990919063ffffffff16565b9050610c7f8b82610efd565b9a50610c8b8282610ef1565b6001600160a01b038516600090815260066020526040902054909250610cb19083610efd565b6001600160a01b038516600090815260066020526040902055505b5050508080610cda906112e1565b915050610b0a565b5043600755610d1b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163388610e82565b600360009054906101000a90046001600160a01b03166001600160a01b0316639b05ddb36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d6b57600080fd5b505af1158015610d7f573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b03163314610db55760405162461bcd60e51b815260040161036b906111f7565b60028190556040518181527f62aeae90d89735cc89a299ecb77480c7ed88f04481174a37ee38b11dc60515f7906020016104eb565b6000546001600160a01b03163314610e145760405162461bcd60e51b815260040161036b906111f7565b6001600160a01b038116610e795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161036b565b61063881610f09565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ed4908490610f59565b505050565b600061071382846112fc565b6000610713828461131b565b6000610713828461133d565b60006107138284611354565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610fae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661102b9092919063ffffffff16565b805190915015610ed45780806020019051810190610fcc919061136c565b610ed45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161036b565b606061103a8484600085611042565b949350505050565b6060824710156110a35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161036b565b6001600160a01b0385163b6110fa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036b565b600080866001600160a01b0316858760405161111691906113be565b60006040518083038185875af1925050503d8060008114611153576040519150601f19603f3d011682016040523d82523d6000602084013e611158565b606091505b5091509150611168828286611173565b979650505050505050565b60608315611182575081610713565b8251156111925782518084602001fd5b8160405162461bcd60e51b815260040161036b91906113da565b6001600160a01b038116811461063857600080fd5b6000602082840312156111d357600080fd5b8135610713816111ac565b6000602082840312156111f057600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008060008060008060008060006101208a8c03121561124b57600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b6000602082840312156112a757600080fd5b5051919050565b6000602082840312156112c057600080fd5b8151610713816111ac565b634e487b7160e01b600052601160045260246000fd5b60006000198214156112f5576112f56112cb565b5060010190565b6000816000190483118215151615611316576113166112cb565b500290565b60008261133857634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561134f5761134f6112cb565b500390565b60008219821115611367576113676112cb565b500190565b60006020828403121561137e57600080fd5b8151801515811461071357600080fd5b60005b838110156113a9578181015183820152602001611391565b838111156113b8576000848401525b50505050565b600082516113d081846020870161138e565b9190910192915050565b60208152600082518060208401526113f981604085016020870161138e565b601f01601f1916919091016040019291505056fea2646970667358221220499321630e36dc6d77710a97dc043b1cf063affecc9202b582f104eff737cf4164736f6c634300080c0033",
  "deployedSourceMap": "326:6623:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;687:27;;;;;-1:-1:-1;;;;;687:27:24;;;;;;-1:-1:-1;;;;;196:32:33;;;178:51;;166:2;151:18;687:27:24;;;;;;;;1988:241;;;;;;:::i;:::-;;:::i;:::-;;581:39;;615:5;581:39;;;;;823:25:33;;;811:2;796:18;581:39:24;677:177:33;1134:37:24;;;;;;6378:277;;;;;;:::i;:::-;;:::i;720:32::-;;;;;-1:-1:-1;;;;;720:32:24;;;1592:224;;;;;;:::i;:::-;;:::i;5981:249::-;;;:::i;3371:328::-;;;;;;:::i;:::-;;:::i;626:21::-;;;;;;986:36;;;;;;2694:504;;;:::i;1206:34::-;;;;;;1668:101:0;;;:::i;1036:85::-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;1036:85;;758:28:24;;;;;3841:2035;;;:::i;2377:123::-;;;;;;:::i;:::-;;:::i;1072:32::-;;;;;;511:38;;545:4;511:38;;436:44;;;;;;6770:177;;;:::i;880:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;2429:25:33;;;2485:2;2470:18;;2463:34;;;;2402:18;880:47:24;2255:248:33;1918:198:0;;;;;;:::i;:::-;;:::i;933:46:24:-;;;;;;:::i;:::-;;;;;;;;;;;;;;1988:241;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:12;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;2097:12:24::1;::::0;-1:-1:-1;;;;;2097:12:24::1;2089:37:::0;2068:116:::1;;;::::0;-1:-1:-1;;;2068:116:24;;3071:2:33;2068:116:24::1;::::0;::::1;3053:21:33::0;;;3090:18;;;3083:30;3149:34;3129:18;;;3122:62;3201:18;;2068:116:24::1;2869:356:33::0;2068:116:24::1;2194:12;:28:::0;;-1:-1:-1;;;;;;2194:28:24::1;-1:-1:-1::0;;;;;2194:28:24;;;::::1;::::0;;;::::1;::::0;;1988:241::o;6378:277::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:12;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;6471:1:24::1;6464:4;:8;6456:47;;;::::0;-1:-1:-1;;;6456:47:24;;3432:2:33;6456:47:24::1;::::0;::::1;3414:21:33::0;3471:2;3451:18;;;3444:30;3510:28;3490:18;;;3483:56;3556:18;;6456:47:24::1;3230:350:33::0;6456:47:24::1;545:4;6521;:14;6513:52;;;::::0;-1:-1:-1;;;6513:52:24;;3787:2:33;6513:52:24::1;::::0;::::1;3769:21:33::0;3826:2;3806:18;;;3799:30;3865:27;3845:18;;;3838:55;3910:18;;6513:52:24::1;3585:349:33::0;6513:52:24::1;6575:24;:31:::0;;;6621:27:::1;::::0;823:25:33;;;6621:27:24::1;::::0;811:2:33;796:18;6621:27:24::1;;;;;;;;6378:277:::0;:::o;1592:224::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:12;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1691:11:24::1;::::0;-1:-1:-1;;;;;1691:11:24::1;1683:36:::0;1662:115:::1;;;::::0;-1:-1:-1;;;1662:115:24;;3071:2:33;1662:115:24::1;::::0;::::1;3053:21:33::0;;;3090:18;;;3083:30;3149:34;3129:18;;;3122:62;3201:18;;1662:115:24::1;2869:356:33::0;1662:115:24::1;1787:11;:22:::0;;-1:-1:-1;;;;;;1787:22:24::1;-1:-1:-1::0;;;;;1787:22:24;;;::::1;::::0;;;::::1;::::0;;1592:224::o;5981:249::-;6049:10;6063:1;6037:23;;;:11;:23;;;;;;6029:60;;;;-1:-1:-1;;;6029:60:24;;4141:2:33;6029:60:24;;;4123:21:33;4180:2;4160:18;;;4153:30;-1:-1:-1;;;4199:18:33;;;4192:50;4259:18;;6029:60:24;3939:344:33;6029:60:24;6128:10;6099:14;6116:23;;;:11;:23;;;;;;;6149:27;;;6116:23;6186:37;;:4;-1:-1:-1;;;;;6186:17:24;;6116:23;6186:17;:37::i;:::-;6019:211;5981:249::o;3371:328::-;-1:-1:-1;;;;;3474:18:24;;;3429:7;3474:18;;;:8;:18;;;;;;;;3448:44;;;;;;;;;;;;;;;;;;;;;;;3534:11;;:30;;-1:-1:-1;;;3534:30:24;;;;;178:51:33;;;;3429:7:24;;3448:44;;3534:11;;;:20;;151:18:33;;3534:30:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;3502:62:24;;;-1:-1:-1;;;3659:19:24;;;;3609:17;;3593:99;;3659:19;;-1:-1:-1;3593:44:24;;-1:-1:-1;3632:4:24;;3593:34;;:15;:34::i;:::-;:38;;:44::i;:::-;:48;;:99::i;:::-;3574:118;3371:328;-1:-1:-1;;;3371:328:24:o;2694:504::-;2740:11;;;;;;;;;-1:-1:-1;;;;;2740:11:24;-1:-1:-1;;;;;2740:23:24;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2736:43;;2694:504::o;2736:43::-;2864:12;;;2889:6;;2864:32;;-1:-1:-1;;;2864:32:24;;;;;823:25:33;2837:24:24;;-1:-1:-1;;;;;2864:12:24;;;;:24;;796:18:33;;2864:32:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2837:59;-1:-1:-1;2910:21:24;2906:34;;2933:7;2694:504::o;2906:34::-;2974:22;;:44;;3001:16;2974:26;:44::i;:::-;2949:22;:69;3093:11;;:25;;;-1:-1:-1;;;3093:25:24;;;;3028:18;;3049:79;;-1:-1:-1;;;;;3093:11:24;;;;:23;;:25;;;;;;;;;;;;;;;3028:18;3093:11;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3049:26;:16;3070:4;3049:20;:26::i;:79::-;3158:17;;3028:100;;-1:-1:-1;3158:33:24;;3028:100;3158:21;:33::i;:::-;3138:17;:53;-1:-1:-1;;2694:504:24:o;1668:101:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:12;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;3841:2035:24:-;3927:12;3902:21;;:37;;3881:116;;;;-1:-1:-1;;;3881:116:24;;5362:2:33;3881:116:24;;;5344:21:33;;;5381:18;;;5374:30;5440:34;5420:18;;;5413:62;5492:18;;3881:116:24;5160:356:33;3881:116:24;4008:24;4046:26;4075:11;;;;;;;;;-1:-1:-1;;;;;4075:11:24;-1:-1:-1;;;;;4075:30:24;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4046:61;;4117:21;4141:11;;;;;;;;;-1:-1:-1;;;;;4141:11:24;-1:-1:-1;;;;;4141:25:24;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4117:51;;4178:24;4205:11;;;;;;;;;-1:-1:-1;;;;;4205:11:24;-1:-1:-1;;;;;4205:29:24;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4178:58;-1:-1:-1;4268:18:24;4300:35;;;4296:55;;-1:-1:-1;4350:1:24;4296:55;4383:13;4423:33;;;;;:98;;-1:-1:-1;4508:13:24;4472:32;:10;4487:16;4472:14;:32::i;:::-;:49;;4423:98;4406:212;;;-1:-1:-1;4545:13:24;4406:212;;;4586:32;:10;4601:16;4586:14;:32::i;:::-;4573:45;;4406:212;4629:15;:13;:15::i;:::-;4671:10;4654:1077;4687:10;4683:1;:14;4654:1077;;;4743:11;;:29;;-1:-1:-1;;;4743:29:24;;;;;823:25:33;;;4718:22:24;;-1:-1:-1;;;;;4743:11:24;;:26;;796:18:33;;4743:29:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4820:24:24;;;4786:31;4820:24;;;:8;:24;;;;;;;4897:11;;:66;;-1:-1:-1;;;4897:66:24;;;;;178:51:33;;;;4820:24:24;;-1:-1:-1;4897:11:24;;;;:20;;151:18:33;;4897:66:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;4858:105:24;;;-1:-1:-1;;;5125:26:24;;;;5058:17;;4859:18;;5001:151;;-1:-1:-1;5125:26:24;;-1:-1:-1;5001:102:24;;5098:4;;5001:75;;4858:105;5001:56;:75::i;:151::-;5195:26;;;;4978:174;;-1:-1:-1;5195:74:24;;4978:174;5195:30;:74::i;:::-;5166:26;;;:103;5288:16;;5284:437;;5324:19;5346:97;615:5;5346:63;5384:24;;5346:12;:37;;:63;;;;:::i;:97::-;5324:119;-1:-1:-1;5480:33:24;:16;5324:119;5480:20;:33::i;:::-;5461:52;-1:-1:-1;5546:29:24;:12;5563:11;5546:16;:29::i;:::-;-1:-1:-1;;;;;5623:27:24;;;;;;:11;:27;;;;;;5531:44;;-1:-1:-1;5623:83:24;;5531:44;5623:31;:83::i;:::-;-1:-1:-1;;;;;5593:27:24;;;;;;:11;:27;;;;;:113;-1:-1:-1;5284:437:24;4704:1027;;;4699:3;;;;;:::i;:::-;;;;4654:1077;;;-1:-1:-1;5765:12:24;5741:21;:36;5787:47;-1:-1:-1;;;;;5787:4:24;:17;5805:10;5817:16;5787:17;:47::i;:::-;5844:11;;;;;;;;;-1:-1:-1;;;;;5844:11:24;-1:-1:-1;;;;;5844:23:24;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3871:2005;;;;;;3841:2035::o;2377:123::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:12;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;2440:6:24::1;:16:::0;;;2471:22:::1;::::0;823:25:33;;;2471:22:24::1;::::0;811:2:33;796:18;2471:22:24::1;677:177:33::0;1918:198:0;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:12;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;6265:2:33;1998:73:0::1;::::0;::::1;6247:21:33::0;6304:2;6284:18;;;6277:30;6343:34;6323:18;;;6316:62;-1:-1:-1;;;6394:18:33;;;6387:36;6440:19;;1998:73:0::1;6063:402:33::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;701:205:6:-:0;840:58;;;-1:-1:-1;;;;;6662:32:33;;840:58:6;;;6644:51:33;6711:18;;;;6704:34;;;840:58:6;;;;;;;;;;6617:18:33;;;;840:58:6;;;;;;;;-1:-1:-1;;;;;840:58:6;-1:-1:-1;;;840:58:6;;;813:86;;833:5;;813:19;:86::i;:::-;701:205;;;:::o;3451:96:16:-;3509:7;3535:5;3539:1;3535;:5;:::i;3836:96::-;3894:7;3920:5;3924:1;3920;:5;:::i;3108:96::-;3166:7;3192:5;3196:1;3192;:5;:::i;2741:96::-;2799:7;2825:5;2829:1;2825;:5;:::i;2270:187:0:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;3207:706:6:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:6;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:6;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:6;;7891:2:33;3811:85:6;;;7873:21:33;7930:2;7910:18;;;7903:30;7969:34;7949:18;;;7942:62;-1:-1:-1;;;8020:18:33;;;8013:40;8070:19;;3811:85:6;7689:406:33;3861:223:11;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;3861:223;-1:-1:-1;;;;3861:223:11:o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:11;;8302:2:33;5137:81:11;;;8284:21:33;8341:2;8321:18;;;8314:30;8380:34;8360:18;;;8353:62;-1:-1:-1;;;8431:18:33;;;8424:36;8477:19;;5137:81:11;8100:402:33;5137:81:11;-1:-1:-1;;;;;1465:19:11;;;5228:60;;;;-1:-1:-1;;;5228:60:11;;8709:2:33;5228:60:11;;;8691:21:33;8748:2;8728:18;;;8721:30;8787:31;8767:18;;;8760:59;8836:18;;5228:60:11;8507:353:33;5228:60:11;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:11;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:11:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:11;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:11;;;;;;;;:::i;240:145:33:-;-1:-1:-1;;;;;329:31:33;;319:42;;309:70;;375:1;372;365:12;390:282;470:6;523:2;511:9;502:7;498:23;494:32;491:52;;;539:1;536;529:12;491:52;578:9;565:23;597:45;636:5;597:45;:::i;859:180::-;918:6;971:2;959:9;950:7;946:23;942:32;939:52;;;987:1;984;977:12;939:52;-1:-1:-1;1010:23:33;;859:180;-1:-1:-1;859:180:33:o;2508:356::-;2710:2;2692:21;;;2729:18;;;2722:30;2788:34;2783:2;2768:18;;2761:62;2855:2;2840:18;;2508:356::o;4288:678::-;4430:6;4438;4446;4454;4462;4470;4478;4486;4494;4547:3;4535:9;4526:7;4522:23;4518:33;4515:53;;;4564:1;4561;4554:12;4515:53;4593:9;4587:16;4577:26;;4643:2;4632:9;4628:18;4622:25;4612:35;;4687:2;4676:9;4672:18;4666:25;4656:35;;4731:2;4720:9;4716:18;4710:25;4700:35;;4775:3;4764:9;4760:19;4754:26;4744:36;;4820:3;4809:9;4805:19;4799:26;4789:36;;4865:3;4854:9;4850:19;4844:26;4834:36;;4910:3;4899:9;4895:19;4889:26;4879:36;;4955:3;4944:9;4940:19;4934:26;4924:36;;4288:678;;;;;;;;;;;:::o;4971:184::-;5041:6;5094:2;5082:9;5073:7;5069:23;5065:32;5062:52;;;5110:1;5107;5100:12;5062:52;-1:-1:-1;5133:16:33;;4971:184;-1:-1:-1;4971:184:33:o;5521:265::-;5591:6;5644:2;5632:9;5623:7;5619:23;5615:32;5612:52;;;5660:1;5657;5650:12;5612:52;5692:9;5686:16;5711:45;5750:5;5711:45;:::i;5791:127::-;5852:10;5847:3;5843:20;5840:1;5833:31;5883:4;5880:1;5873:15;5907:4;5904:1;5897:15;5923:135;5962:3;-1:-1:-1;;5983:17:33;;5980:43;;;6003:18;;:::i;:::-;-1:-1:-1;6050:1:33;6039:13;;5923:135::o;6749:168::-;6789:7;6855:1;6851;6847:6;6843:14;6840:1;6837:21;6832:1;6825:9;6818:17;6814:45;6811:71;;;6862:18;;:::i;:::-;-1:-1:-1;6902:9:33;;6749:168::o;6922:217::-;6962:1;6988;6978:132;;7032:10;7027:3;7023:20;7020:1;7013:31;7067:4;7064:1;7057:15;7095:4;7092:1;7085:15;6978:132;-1:-1:-1;7124:9:33;;6922:217::o;7144:125::-;7184:4;7212:1;7209;7206:8;7203:34;;;7217:18;;:::i;:::-;-1:-1:-1;7254:9:33;;7144:125::o;7274:128::-;7314:3;7345:1;7341:6;7338:1;7335:13;7332:39;;;7351:18;;:::i;:::-;-1:-1:-1;7387:9:33;;7274:128::o;7407:277::-;7474:6;7527:2;7515:9;7506:7;7502:23;7498:32;7495:52;;;7543:1;7540;7533:12;7495:52;7575:9;7569:16;7628:5;7621:13;7614:21;7607:5;7604:32;7594:60;;7650:1;7647;7640:12;8865:258;8937:1;8947:113;8961:6;8958:1;8955:13;8947:113;;;9037:11;;;9031:18;9018:11;;;9011:39;8983:2;8976:10;8947:113;;;9078:6;9075:1;9072:13;9069:48;;;9113:1;9104:6;9099:3;9095:16;9088:27;9069:48;;8865:258;;;:::o;9128:274::-;9257:3;9295:6;9289:13;9311:53;9357:6;9352:3;9345:4;9337:6;9333:17;9311:53;:::i;:::-;9380:16;;;;;9128:274;-1:-1:-1;;9128:274:33:o;9407:383::-;9556:2;9545:9;9538:21;9519:4;9588:6;9582:13;9631:6;9626:2;9615:9;9611:18;9604:34;9647:66;9706:6;9701:2;9690:9;9686:18;9681:2;9673:6;9669:15;9647:66;:::i;:::-;9774:2;9753:15;-1:-1:-1;;9749:29:33;9734:45;;;;9781:2;9730:54;;9407:383;-1:-1:-1;;9407:383:33:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "compoundAll()": {
        "details": "compounds the rewards of all users in the pool while deducting fees",
        "notice": "compounds the rewards of all users in the pool"
      },
      "emergencyWithdraw()": {
        "details": "transfer all available funds of users to users wallet",
        "notice": "emergency withdraw funds of users"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingProfits(address)": {
        "notice": "Get pending Profits to Claim",
        "params": {
          "_address": "the user's wallet address to calculate profits"
        },
        "returns": {
          "_0": "pending Profits to be claimed by this user"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setGalacticChef(address)": {
        "details": "stores the _galacticChef address in the state variable `galacticChef`",
        "notice": "Store `_galacticChef`.",
        "params": {
          "_galacticChef": "the new value to store"
        }
      },
      "setPerformanceFeeCompounder(uint256)": {
        "details": "stores the fee in the state variable `performanceFeeCompounder`",
        "notice": "Store `_fee`.",
        "params": {
          "_fee": "the new value to store"
        }
      },
      "setPoolId(uint256)": {
        "details": "stores the _poolId address in the state variable `poolId`",
        "notice": "Store `_poolId`.",
        "params": {
          "_poolId": "the new value to store"
        }
      },
      "setStakingPool(address)": {
        "details": "stores the _staking address in the state variable `staking`",
        "notice": "Store `_staking`.",
        "params": {
          "_staking": "the new value to store"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateProfits()": {
        "details": "this allows for consistent profit reporting and no change on profits to distribute",
        "notice": "updates accProfitPerShare based on current Profit available and totalShares"
      },
      "withdrawNiceRewards()": {
        "details": "transfer all available funds of users to users wallet",
        "notice": "withdraw funds of users"
      }
    },
    "version": 1
  },
  "offset": [
    326,
    6949
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x668579C9 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xB249E88E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDB2E21BC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDB2E21BC EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xDC6E13E1 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xFB777364 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB249E88E EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0xBCA5503D EQ PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x668579C9 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x92CC410A EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x9B05DDB3 EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xAC78012C EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3028F63A GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x3028F63A EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0x37AB5796 EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x39CC1378 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x3E0DC34E EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x4BF211B8 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x51496BBD EQ PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC56AE3B EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xC616882 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x1F2DC5EF EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x2533830A EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x26CBA336 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x2AABC592 EQ PUSH2 0x1F0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x18B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BB PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x341 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C6 PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19F JUMP JUMPDEST PUSH2 0x1C6 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x11DE JUMP JUMPDEST PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x18B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x59B JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH2 0x1C6 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x71A JUMP JUMPDEST PUSH2 0x1C6 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x8C2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18B JUMP JUMPDEST PUSH2 0x18B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x8F8 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x11DE JUMP JUMPDEST PUSH2 0xD8B JUMP JUMPDEST PUSH2 0x1C6 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x2F9 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x19F JUMP JUMPDEST PUSH2 0x1BB PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xDEA JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x374 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x3CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7374616B696E6720706F6F6C206164647265737320616C726561647920736574 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x419 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466565206D7573742062652067726561746572207468616E2030000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST PUSH2 0x3E8 DUP2 LT PUSH2 0x4BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466565206D757374206265206C657373207468616E2031302500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x9B49D0CD76012D9C67241C2F68F836EFBAF50EA29901A250040671402D5263F5 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x520 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x579 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7374616B696E6720706F6F6C206164647265737320616C726561647920736574 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4E6F207265776172647320617661696C61626C65 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SSTORE SWAP1 PUSH2 0x638 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 PUSH2 0xE82 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SLOAD SWAP1 MLOAD PUSH4 0xDC6E13E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 AND SWAP1 PUSH4 0xDC6E13E1 SWAP1 PUSH1 0x24 ADD PUSH2 0x120 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DA SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST POP POP POP DUP6 DUP8 MSTORE POP POP POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x8 SLOAD PUSH2 0x713 SWAP5 SWAP2 SWAP4 POP PUSH2 0x70D SWAP3 POP PUSH5 0xE8D4A51000 SWAP2 PUSH2 0x707 SWAP2 PUSH2 0xED9 JUMP JUMPDEST SWAP1 PUSH2 0xEE5 JUMP JUMPDEST SWAP1 PUSH2 0xEF1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3A98EF39 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x76F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x793 SWAP2 SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x799 JUMPI JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4828CED9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4828CED9 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x80C SWAP2 SWAP1 PUSH2 0x1295 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x816 JUMPI POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x823 SWAP1 DUP3 PUSH2 0xEFD JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x3A98EF39 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH2 0x8AB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x3A98EF39 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP9 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x878 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x89C SWAP2 SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x707 DUP5 PUSH5 0xE8D4A51000 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 SWAP2 POP PUSH2 0x8BB SWAP1 DUP3 PUSH2 0xEFD JUMP JUMPDEST PUSH1 0x8 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x8F6 PUSH1 0x0 PUSH2 0xF09 JUMP JUMPDEST JUMP JUMPDEST NUMBER PUSH1 0x7 SLOAD GT ISZERO PUSH2 0x94A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6D706F756E6420416C6C206E6F7420796574206170706C696361626C652E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x38ED019A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C6 SWAP2 SWAP1 PUSH2 0x1295 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x289BAC07 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA43 SWAP2 SWAP1 PUSH2 0x1295 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xECB1C924 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA9C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAC0 SWAP2 SWAP1 PUSH2 0x1295 JUMP JUMPDEST SWAP1 POP DUP3 DUP3 DUP2 LT PUSH2 0xACE JUMPI POP PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 GT ISZERO DUP1 PUSH2 0xAE7 JUMPI POP DUP4 PUSH2 0xAE4 DUP4 DUP6 PUSH2 0xEFD JUMP JUMPDEST LT ISZERO JUMPDEST ISZERO PUSH2 0xAF3 JUMPI POP DUP3 PUSH2 0xB00 JUMP JUMPDEST PUSH2 0xAFD DUP3 DUP5 PUSH2 0xEFD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xB08 PUSH2 0x71A JUMP JUMPDEST DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCE2 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5832D571 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x5832D571 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB82 SWAP2 SWAP1 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x3 SLOAD SWAP2 MLOAD PUSH4 0xDC6E13E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 SWAP5 POP SWAP1 SWAP2 AND SWAP1 PUSH4 0xDC6E13E1 SWAP1 PUSH1 0x24 ADD PUSH2 0x120 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC08 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST POP POP POP DUP6 DUP8 SSTORE POP POP POP PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x8 SLOAD PUSH1 0x0 SWAP5 PUSH2 0xC39 SWAP5 POP SWAP2 SWAP3 POP PUSH2 0x70D SWAP2 PUSH5 0xE8D4A51000 SWAP2 PUSH2 0x707 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0xC4B SWAP1 DUP3 PUSH2 0xEFD JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SSTORE DUP1 ISZERO PUSH2 0xCCC JUMPI PUSH1 0x0 PUSH2 0xC73 PUSH2 0x2710 PUSH2 0x707 PUSH1 0x1 SLOAD DUP6 PUSH2 0xED9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0xC7F DUP12 DUP3 PUSH2 0xEFD JUMP JUMPDEST SWAP11 POP PUSH2 0xC8B DUP3 DUP3 PUSH2 0xEF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0xCB1 SWAP1 DUP4 PUSH2 0xEFD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0xCDA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB0A JUMP JUMPDEST POP NUMBER PUSH1 0x7 SSTORE PUSH2 0xD1B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP9 PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9B05DDB3 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDB5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x62AEAE90D89735CC89A299ECB77480C7ED88F04481174A37EE38B11DC60515F7 SWAP1 PUSH1 0x20 ADD PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36B JUMP JUMPDEST PUSH2 0x638 DUP2 PUSH2 0xF09 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xED4 SWAP1 DUP5 SWAP1 PUSH2 0xF59 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x713 DUP3 DUP5 PUSH2 0x12FC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x713 DUP3 DUP5 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x713 DUP3 DUP5 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x713 DUP3 DUP5 PUSH2 0x1354 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAE DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x102B SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xED4 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xFCC SWAP2 SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xED4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x103A DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1042 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x10A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x10FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1116 SWAP2 SWAP1 PUSH2 0x13BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1153 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1158 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1168 DUP3 DUP3 DUP7 PUSH2 0x1173 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1182 JUMPI POP DUP2 PUSH2 0x713 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1192 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36B SWAP2 SWAP1 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x713 DUP2 PUSH2 0x11AC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x124B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 MLOAD SWAP9 POP PUSH1 0x20 DUP11 ADD MLOAD SWAP8 POP PUSH1 0x40 DUP11 ADD MLOAD SWAP7 POP PUSH1 0x60 DUP11 ADD MLOAD SWAP6 POP PUSH1 0x80 DUP11 ADD MLOAD SWAP5 POP PUSH1 0xA0 DUP11 ADD MLOAD SWAP4 POP PUSH1 0xC0 DUP11 ADD MLOAD SWAP3 POP PUSH1 0xE0 DUP11 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP11 ADD MLOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x713 DUP2 PUSH2 0x11AC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x12F5 JUMPI PUSH2 0x12F5 PUSH2 0x12CB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1316 JUMPI PUSH2 0x1316 PUSH2 0x12CB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1338 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x134F JUMPI PUSH2 0x134F PUSH2 0x12CB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1367 JUMPI PUSH2 0x1367 PUSH2 0x12CB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x137E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x713 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13A9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1391 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x13B8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x13D0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x138E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x13F9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x138E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 SWAP4 0x21 PUSH4 0xE36DC6D PUSH24 0x710A97DC043B1CF063AFFECC9202B582F104EFF737CF4164 PUSH20 0x6F6C634300080C00330000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "5": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "CALLVALUE",
      "path": "24"
    },
    "6": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "7": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "8": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "12": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "REVERT",
      "path": "24"
    },
    "16": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "17": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "POP",
      "path": "24"
    },
    "18": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "21": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "LT",
      "path": "24"
    },
    "22": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x173"
    },
    "25": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "26": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "CALLDATALOAD",
      "path": "24"
    },
    "29": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "SHR",
      "path": "24"
    },
    "32": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "33": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x668579C9"
    },
    "38": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "GT",
      "path": "24"
    },
    "39": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xDE"
    },
    "42": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "43": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "44": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xB249E88E"
    },
    "49": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "GT",
      "path": "24"
    },
    "50": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x97"
    },
    "53": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "54": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "55": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xDB2E21BC"
    },
    "60": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "GT",
      "path": "24"
    },
    "61": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x71"
    },
    "64": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "65": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "66": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xDB2E21BC"
    },
    "71": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "72": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2CA"
    },
    "75": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "76": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "77": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xDC6E13E1"
    },
    "82": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "83": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2D2"
    },
    "86": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "87": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "88": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xF2FDE38B"
    },
    "93": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "94": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x30E"
    },
    "97": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "98": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "99": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFB777364"
    },
    "104": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "105": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x321"
    },
    "108": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "109": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "112": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "REVERT",
      "path": "24"
    },
    "113": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "114": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "115": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xB249E88E"
    },
    "120": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "121": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2AF"
    },
    "124": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "125": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "126": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xBC063E1A"
    },
    "131": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "132": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2B8"
    },
    "135": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "136": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "137": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xBCA5503D"
    },
    "142": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "143": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2C1"
    },
    "146": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "147": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "149": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "150": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "REVERT",
      "path": "24"
    },
    "151": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "152": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "153": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x668579C9"
    },
    "158": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "159": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x24B"
    },
    "162": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "163": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "164": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x715018A6"
    },
    "169": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "170": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x254"
    },
    "173": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "174": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "175": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x8DA5CB5B"
    },
    "180": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "181": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x25C"
    },
    "184": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "185": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "186": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x92CC410A"
    },
    "191": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "192": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x26D"
    },
    "195": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "196": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "197": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x9B05DDB3"
    },
    "202": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "203": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x294"
    },
    "206": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "207": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "208": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xAC78012C"
    },
    "213": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "214": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x29C"
    },
    "217": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "218": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "220": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "221": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "REVERT",
      "path": "24"
    },
    "222": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "223": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "224": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x3028F63A"
    },
    "229": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "GT",
      "path": "24"
    },
    "230": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x130"
    },
    "233": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "234": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "235": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x3028F63A"
    },
    "240": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "241": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x203"
    },
    "244": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "245": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "246": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x37AB5796"
    },
    "251": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "252": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x216"
    },
    "255": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "256": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "257": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x39CC1378"
    },
    "262": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "263": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x21E"
    },
    "266": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "267": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "268": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x3E0DC34E"
    },
    "273": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "274": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x231"
    },
    "277": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "278": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "279": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x4BF211B8"
    },
    "284": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "285": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x23A"
    },
    "288": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "289": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "290": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x51496BBD"
    },
    "295": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "296": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x243"
    },
    "299": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "300": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "302": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "303": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "REVERT",
      "path": "24"
    },
    "304": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "305": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "306": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xC56AE3B"
    },
    "311": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "312": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x178"
    },
    "315": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "316": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "317": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xC616882"
    },
    "322": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "323": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1A8"
    },
    "326": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "327": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "328": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x1F2DC5EF"
    },
    "333": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "334": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BD"
    },
    "337": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "338": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "339": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x2533830A"
    },
    "344": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "345": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1D4"
    },
    "348": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "349": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "350": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x26CBA336"
    },
    "355": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "356": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1DD"
    },
    "359": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "360": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "361": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x2AABC592"
    },
    "366": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "EQ",
      "path": "24"
    },
    "367": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1F0"
    },
    "370": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "371": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "372": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "374": {
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "DUP1",
      "path": "24"
    },
    "375": {
      "first_revert": true,
      "fn": null,
      "offset": [
        326,
        6949
      ],
      "op": "REVERT",
      "path": "24"
    },
    "376": {
      "offset": [
        687,
        714
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "377": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "379": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "380": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x18B"
    },
    "383": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "384": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "386": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "388": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "390": {
      "op": "SHL"
    },
    "391": {
      "op": "SUB"
    },
    "392": {
      "offset": [
        687,
        714
      ],
      "op": "AND",
      "path": "24"
    },
    "393": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "DUP2",
      "path": "24"
    },
    "394": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "JUMP",
      "path": "24"
    },
    "395": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "396": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "398": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "403": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "405": {
      "op": "SHL"
    },
    "406": {
      "op": "SUB"
    },
    "407": {
      "op": "SWAP1"
    },
    "408": {
      "op": "SWAP2"
    },
    "409": {
      "op": "AND"
    },
    "410": {
      "op": "DUP2"
    },
    "411": {
      "op": "MSTORE"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "414": {
      "op": "ADD"
    },
    "415": {
      "offset": [
        687,
        714
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "416": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "418": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "419": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "DUP1",
      "path": "24"
    },
    "420": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "421": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "SUB",
      "path": "24"
    },
    "422": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "423": {
      "fn": null,
      "offset": [
        687,
        714
      ],
      "op": "RETURN",
      "path": "24"
    },
    "424": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "425": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "428": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1B6"
    },
    "431": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "432": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "434": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11C1"
    },
    "437": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "jump": "i",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMP",
      "path": "24"
    },
    "438": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "439": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x341"
    },
    "442": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "jump": "i",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMP",
      "path": "24"
    },
    "443": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "444": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "STOP",
      "path": "24"
    },
    "445": {
      "offset": [
        581,
        620
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "446": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        581,
        620
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "449": {
      "offset": [
        615,
        620
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2710"
    },
    "452": {
      "offset": [
        581,
        620
      ],
      "op": "DUP2",
      "path": "24"
    },
    "453": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        581,
        620
      ],
      "op": "JUMP",
      "path": "24"
    },
    "454": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        581,
        620
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "455": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        581,
        620
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "457": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        581,
        620
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "458": {
      "op": "SWAP1"
    },
    "459": {
      "op": "DUP2"
    },
    "460": {
      "op": "MSTORE"
    },
    "461": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "463": {
      "op": "ADD"
    },
    "464": {
      "offset": [
        581,
        620
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x19F"
    },
    "467": {
      "op": "JUMP"
    },
    "468": {
      "offset": [
        1134,
        1171
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "469": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1134,
        1171
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "472": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1134,
        1171
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x9"
    },
    "474": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1134,
        1171
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "475": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1134,
        1171
      ],
      "op": "DUP2",
      "path": "24"
    },
    "476": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1134,
        1171
      ],
      "op": "JUMP",
      "path": "24"
    },
    "477": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "478": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "481": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1EB"
    },
    "484": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "485": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "487": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11DE"
    },
    "490": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "jump": "i",
      "offset": [
        6378,
        6655
      ],
      "op": "JUMP",
      "path": "24"
    },
    "491": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "492": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x3EF"
    },
    "495": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "jump": "i",
      "offset": [
        6378,
        6655
      ],
      "op": "JUMP",
      "path": "24"
    },
    "496": {
      "offset": [
        720,
        752
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "497": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        720,
        752
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "499": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        720,
        752
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "500": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        720,
        752
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x18B"
    },
    "503": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        720,
        752
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "504": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "506": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "508": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "510": {
      "op": "SHL"
    },
    "511": {
      "op": "SUB"
    },
    "512": {
      "offset": [
        720,
        752
      ],
      "op": "AND",
      "path": "24"
    },
    "513": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        720,
        752
      ],
      "op": "DUP2",
      "path": "24"
    },
    "514": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        720,
        752
      ],
      "op": "JUMP",
      "path": "24"
    },
    "515": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "516": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "519": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x211"
    },
    "522": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "523": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "525": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11C1"
    },
    "528": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "jump": "i",
      "offset": [
        1592,
        1816
      ],
      "op": "JUMP",
      "path": "24"
    },
    "529": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "530": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x4F6"
    },
    "533": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "jump": "i",
      "offset": [
        1592,
        1816
      ],
      "op": "JUMP",
      "path": "24"
    },
    "534": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        5981,
        6230
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "535": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        5981,
        6230
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "538": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        5981,
        6230
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x59B"
    },
    "541": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "jump": "i",
      "offset": [
        5981,
        6230
      ],
      "op": "JUMP",
      "path": "24"
    },
    "542": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "543": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "546": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x22C"
    },
    "549": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "550": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "552": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11C1"
    },
    "555": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "i",
      "offset": [
        3371,
        3699
      ],
      "op": "JUMP",
      "path": "24"
    },
    "556": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "557": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x63B"
    },
    "560": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "i",
      "offset": [
        3371,
        3699
      ],
      "op": "JUMP",
      "path": "24"
    },
    "561": {
      "offset": [
        626,
        647
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "562": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        626,
        647
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "565": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        626,
        647
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x2"
    },
    "567": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        626,
        647
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "568": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        626,
        647
      ],
      "op": "DUP2",
      "path": "24"
    },
    "569": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        626,
        647
      ],
      "op": "JUMP",
      "path": "24"
    },
    "570": {
      "offset": [
        986,
        1022
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "571": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        986,
        1022
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "574": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        986,
        1022
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x7"
    },
    "576": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        986,
        1022
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "577": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        986,
        1022
      ],
      "op": "DUP2",
      "path": "24"
    },
    "578": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        986,
        1022
      ],
      "op": "JUMP",
      "path": "24"
    },
    "579": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2694,
        3198
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "580": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2694,
        3198
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "583": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2694,
        3198
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x71A"
    },
    "586": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        2694,
        3198
      ],
      "op": "JUMP",
      "path": "24"
    },
    "587": {
      "offset": [
        1206,
        1240
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "588": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        1206,
        1240
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "591": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        1206,
        1240
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xA"
    },
    "593": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        1206,
        1240
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "594": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        1206,
        1240
      ],
      "op": "DUP2",
      "path": "24"
    },
    "595": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        1206,
        1240
      ],
      "op": "JUMP",
      "path": "24"
    },
    "596": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "597": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1BB"
    },
    "600": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8C2"
    },
    "603": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "604": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "605": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "607": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "608": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "610": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "612": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "614": {
      "op": "SHL"
    },
    "615": {
      "op": "SUB"
    },
    "616": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "617": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B"
    },
    "620": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMP",
      "path": "0"
    },
    "621": {
      "offset": [
        758,
        786
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "622": {
      "fn": "Ownable.owner",
      "offset": [
        758,
        786
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x18B"
    },
    "625": {
      "fn": "Ownable.owner",
      "offset": [
        758,
        786
      ],
      "op": "PUSH32",
      "path": "24",
      "value": "0x0"
    },
    "658": {
      "fn": "Ownable.owner",
      "offset": [
        758,
        786
      ],
      "op": "DUP2",
      "path": "24"
    },
    "659": {
      "fn": "Ownable.owner",
      "offset": [
        758,
        786
      ],
      "op": "JUMP",
      "path": "24"
    },
    "660": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3841,
        5876
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "661": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3841,
        5876
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "664": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3841,
        5876
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x8F8"
    },
    "667": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        3841,
        5876
      ],
      "op": "JUMP",
      "path": "24"
    },
    "668": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "669": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "672": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2AA"
    },
    "675": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "676": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "678": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11DE"
    },
    "681": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "jump": "i",
      "offset": [
        2377,
        2500
      ],
      "op": "JUMP",
      "path": "24"
    },
    "682": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "683": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xD8B"
    },
    "686": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "jump": "i",
      "offset": [
        2377,
        2500
      ],
      "op": "JUMP",
      "path": "24"
    },
    "687": {
      "offset": [
        1072,
        1104
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "688": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        1072,
        1104
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "691": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        1072,
        1104
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x8"
    },
    "693": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        1072,
        1104
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "694": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        1072,
        1104
      ],
      "op": "DUP2",
      "path": "24"
    },
    "695": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        1072,
        1104
      ],
      "op": "JUMP",
      "path": "24"
    },
    "696": {
      "offset": [
        511,
        549
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "697": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        511,
        549
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "700": {
      "offset": [
        545,
        549
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x3E8"
    },
    "703": {
      "offset": [
        511,
        549
      ],
      "op": "DUP2",
      "path": "24"
    },
    "704": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        511,
        549
      ],
      "op": "JUMP",
      "path": "24"
    },
    "705": {
      "offset": [
        436,
        480
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "706": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        436,
        480
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "709": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        436,
        480
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1"
    },
    "711": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        436,
        480
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "712": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        436,
        480
      ],
      "op": "DUP2",
      "path": "24"
    },
    "713": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        436,
        480
      ],
      "op": "JUMP",
      "path": "24"
    },
    "714": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        6770,
        6947
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "715": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        6770,
        6947
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1BB"
    },
    "718": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        6770,
        6947
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x5EE"
    },
    "721": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "jump": "i",
      "offset": [
        6770,
        6947
      ],
      "op": "JUMP",
      "path": "24"
    },
    "722": {
      "offset": [
        880,
        927
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "723": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2F9"
    },
    "726": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2E0"
    },
    "729": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "730": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "732": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11C1"
    },
    "735": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "jump": "i",
      "offset": [
        880,
        927
      ],
      "op": "JUMP",
      "path": "24"
    },
    "736": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "737": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x5"
    },
    "739": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "741": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "742": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "744": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "745": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "DUP2",
      "path": "24"
    },
    "746": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "747": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "749": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "750": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "751": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "DUP1",
      "path": "24"
    },
    "752": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "753": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1"
    },
    "755": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "756": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "757": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "ADD",
      "path": "24"
    },
    "758": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "759": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "DUP3",
      "path": "24"
    },
    "760": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "JUMP",
      "path": "24"
    },
    "761": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "762": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "764": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "DUP1",
      "path": "24"
    },
    "765": {
      "fn": "BitcrushNiceStaking.emergencyWithdraw",
      "offset": [
        880,
        927
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "766": {
      "op": "SWAP3"
    },
    "767": {
      "op": "DUP4"
    },
    "768": {
      "op": "MSTORE"
    },
    "769": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "771": {
      "op": "DUP4"
    },
    "772": {
      "op": "ADD"
    },
    "773": {
      "op": "SWAP2"
    },
    "774": {
      "op": "SWAP1"
    },
    "775": {
      "op": "SWAP2"
    },
    "776": {
      "op": "MSTORE"
    },
    "777": {
      "op": "ADD"
    },
    "778": {
      "offset": [
        880,
        927
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x19F"
    },
    "781": {
      "op": "JUMP"
    },
    "782": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "783": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1BB"
    },
    "786": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x31C"
    },
    "789": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "790": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "792": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C1"
    },
    "795": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "796": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "797": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEA"
    },
    "800": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "801": {
      "offset": [
        933,
        979
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "802": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1C6"
    },
    "805": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x32F"
    },
    "808": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "CALLDATASIZE",
      "path": "24"
    },
    "809": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "811": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x11C1"
    },
    "814": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        933,
        979
      ],
      "op": "JUMP",
      "path": "24"
    },
    "815": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "816": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x6"
    },
    "818": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "820": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "821": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "823": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "824": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "DUP2",
      "path": "24"
    },
    "825": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "826": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "828": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "829": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "830": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "831": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "DUP2",
      "path": "24"
    },
    "832": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        933,
        979
      ],
      "op": "JUMP",
      "path": "24"
    },
    "833": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "834": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "836": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "837": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "839": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "841": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "843": {
      "op": "SHL"
    },
    "844": {
      "op": "SUB"
    },
    "845": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "846": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "12",
      "statement": 1
    },
    "847": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "848": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x374"
    },
    "851": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "852": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "854": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "855": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "859": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "861": {
      "op": "SHL"
    },
    "862": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "863": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "864": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "866": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "867": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "870": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "871": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F7"
    },
    "874": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "875": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "876": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "878": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "879": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "DUP1",
      "path": "0"
    },
    "880": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "881": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SUB",
      "path": "0"
    },
    "882": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "883": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "884": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "885": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2097,
        2109
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 2,
      "value": "0x4"
    },
    "887": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2097,
        2109
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "892": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "894": {
      "op": "SHL"
    },
    "895": {
      "op": "SUB"
    },
    "896": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2097,
        2109
      ],
      "op": "AND",
      "path": "24"
    },
    "897": {
      "branch": 52,
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2089,
        2126
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "898": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x3CD"
    },
    "901": {
      "branch": 52,
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "902": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "904": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "905": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "909": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "911": {
      "op": "SHL"
    },
    "912": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "DUP2",
      "path": "24"
    },
    "913": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "914": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "916": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "918": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "DUP3",
      "path": "24"
    },
    "919": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "ADD",
      "path": "24"
    },
    "920": {
      "op": "DUP2"
    },
    "921": {
      "op": "SWAP1"
    },
    "922": {
      "op": "MSTORE"
    },
    "923": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "925": {
      "op": "DUP3"
    },
    "926": {
      "op": "ADD"
    },
    "927": {
      "op": "MSTORE"
    },
    "928": {
      "op": "PUSH32",
      "value": "0x7374616B696E6720706F6F6C206164647265737320616C726561647920736574"
    },
    "961": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "963": {
      "op": "DUP3"
    },
    "964": {
      "op": "ADD"
    },
    "965": {
      "op": "MSTORE"
    },
    "966": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "968": {
      "op": "ADD"
    },
    "969": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x36B"
    },
    "972": {
      "op": "JUMP"
    },
    "973": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2068,
        2184
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "974": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2206
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 3,
      "value": "0x4"
    },
    "976": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "DUP1",
      "path": "24"
    },
    "977": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "978": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "980": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "982": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "984": {
      "op": "SHL"
    },
    "985": {
      "op": "SUB"
    },
    "986": {
      "op": "NOT"
    },
    "987": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "AND",
      "path": "24"
    },
    "988": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "990": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "992": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "994": {
      "op": "SHL"
    },
    "995": {
      "op": "SUB"
    },
    "996": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "997": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "998": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "999": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "AND",
      "path": "24"
    },
    "1000": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1001": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1002": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1003": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "OR",
      "path": "24"
    },
    "1004": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1005": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "offset": [
        2194,
        2222
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "1006": {
      "fn": "BitcrushNiceStaking.setGalacticChef",
      "jump": "o",
      "offset": [
        1988,
        2229
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1007": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1008": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1010": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1017": {
      "op": "SHL"
    },
    "1018": {
      "op": "SUB"
    },
    "1019": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "1020": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "12"
    },
    "1021": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1022": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x419"
    },
    "1025": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1026": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1028": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1029": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1033": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1035": {
      "op": "SHL"
    },
    "1036": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1037": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1038": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1040": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1041": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "1044": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1045": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F7"
    },
    "1048": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1049": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1050": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6471,
        6472
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 4,
      "value": "0x0"
    },
    "1052": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6464,
        6468
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1053": {
      "branch": 53,
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6464,
        6472
      ],
      "op": "GT",
      "path": "24"
    },
    "1054": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x469"
    },
    "1057": {
      "branch": 53,
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1058": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1060": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1061": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1065": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1067": {
      "op": "SHL"
    },
    "1068": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1069": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1070": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1072": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1074": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1075": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "ADD",
      "path": "24"
    },
    "1076": {
      "op": "MSTORE"
    },
    "1077": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1081": {
      "op": "DUP3"
    },
    "1082": {
      "op": "ADD"
    },
    "1083": {
      "op": "MSTORE"
    },
    "1084": {
      "op": "PUSH32",
      "value": "0x466565206D7573742062652067726561746572207468616E2030000000000000"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1119": {
      "op": "DUP3"
    },
    "1120": {
      "op": "ADD"
    },
    "1121": {
      "op": "MSTORE"
    },
    "1122": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1124": {
      "op": "ADD"
    },
    "1125": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x36B"
    },
    "1128": {
      "op": "JUMP"
    },
    "1129": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6456,
        6503
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1130": {
      "offset": [
        545,
        549
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x3E8"
    },
    "1133": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6521,
        6525
      ],
      "op": "DUP2",
      "path": "24",
      "statement": 5
    },
    "1134": {
      "branch": 54,
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6521,
        6535
      ],
      "op": "LT",
      "path": "24"
    },
    "1135": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x4BA"
    },
    "1138": {
      "branch": 54,
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1139": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1141": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1142": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1146": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1148": {
      "op": "SHL"
    },
    "1149": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1150": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1151": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1153": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1155": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1156": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "ADD",
      "path": "24"
    },
    "1157": {
      "op": "MSTORE"
    },
    "1158": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "1160": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1162": {
      "op": "DUP3"
    },
    "1163": {
      "op": "ADD"
    },
    "1164": {
      "op": "MSTORE"
    },
    "1165": {
      "op": "PUSH32",
      "value": "0x466565206D757374206265206C657373207468616E2031302500000000000000"
    },
    "1198": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1200": {
      "op": "DUP3"
    },
    "1201": {
      "op": "ADD"
    },
    "1202": {
      "op": "MSTORE"
    },
    "1203": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1205": {
      "op": "ADD"
    },
    "1206": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x36B"
    },
    "1209": {
      "op": "JUMP"
    },
    "1210": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6513,
        6565
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1211": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6575,
        6599
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 6,
      "value": "0x1"
    },
    "1213": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6575,
        6606
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1214": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6575,
        6606
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1215": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6575,
        6606
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "1216": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 7,
      "value": "0x40"
    },
    "1218": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1219": {
      "op": "DUP2"
    },
    "1220": {
      "op": "DUP2"
    },
    "1221": {
      "op": "MSTORE"
    },
    "1222": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "PUSH32",
      "path": "24",
      "value": "0x9B49D0CD76012D9C67241C2F68F836EFBAF50EA29901A250040671402D5263F5"
    },
    "1255": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1256": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1258": {
      "op": "ADD"
    },
    "1259": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1260": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1262": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1263": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1264": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1265": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "SUB",
      "path": "24"
    },
    "1266": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1267": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6621,
        6648
      ],
      "op": "LOG1",
      "path": "24"
    },
    "1268": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "offset": [
        6378,
        6655
      ],
      "op": "POP",
      "path": "24"
    },
    "1269": {
      "fn": "BitcrushNiceStaking.setPerformanceFeeCompounder",
      "jump": "o",
      "offset": [
        6378,
        6655
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1270": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1592,
        1816
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1271": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1273": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1274": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1280": {
      "op": "SHL"
    },
    "1281": {
      "op": "SUB"
    },
    "1282": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "1283": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "12"
    },
    "1284": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1285": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x520"
    },
    "1288": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1289": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1291": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1292": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1296": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1298": {
      "op": "SHL"
    },
    "1299": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1300": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1301": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1303": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1304": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "1307": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1308": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F7"
    },
    "1311": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1312": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1313": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1691,
        1702
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 8,
      "value": "0x3"
    },
    "1315": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1691,
        1702
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1316": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1320": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1322": {
      "op": "SHL"
    },
    "1323": {
      "op": "SUB"
    },
    "1324": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1691,
        1702
      ],
      "op": "AND",
      "path": "24"
    },
    "1325": {
      "branch": 55,
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1683,
        1719
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "1326": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x579"
    },
    "1329": {
      "branch": 55,
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1330": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1332": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1333": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1339": {
      "op": "SHL"
    },
    "1340": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1341": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1344": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1346": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1347": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "ADD",
      "path": "24"
    },
    "1348": {
      "op": "DUP2"
    },
    "1349": {
      "op": "SWAP1"
    },
    "1350": {
      "op": "MSTORE"
    },
    "1351": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1353": {
      "op": "DUP3"
    },
    "1354": {
      "op": "ADD"
    },
    "1355": {
      "op": "MSTORE"
    },
    "1356": {
      "op": "PUSH32",
      "value": "0x7374616B696E6720706F6F6C206164647265737320616C726561647920736574"
    },
    "1389": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1391": {
      "op": "DUP3"
    },
    "1392": {
      "op": "ADD"
    },
    "1393": {
      "op": "MSTORE"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1396": {
      "op": "ADD"
    },
    "1397": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x36B"
    },
    "1400": {
      "op": "JUMP"
    },
    "1401": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1662,
        1777
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1402": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1798
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 9,
      "value": "0x3"
    },
    "1404": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1405": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1408": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1412": {
      "op": "SHL"
    },
    "1413": {
      "op": "SUB"
    },
    "1414": {
      "op": "NOT"
    },
    "1415": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "AND",
      "path": "24"
    },
    "1416": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1420": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1422": {
      "op": "SHL"
    },
    "1423": {
      "op": "SUB"
    },
    "1424": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1425": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1426": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1427": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "AND",
      "path": "24"
    },
    "1428": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1429": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1430": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1431": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "OR",
      "path": "24"
    },
    "1432": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1433": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "offset": [
        1787,
        1809
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "1434": {
      "fn": "BitcrushNiceStaking.setStakingPool",
      "jump": "o",
      "offset": [
        1592,
        1816
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1435": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        5981,
        6230
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1436": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6049,
        6059
      ],
      "op": "CALLER",
      "path": "24",
      "statement": 10
    },
    "1437": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6063,
        6064
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1439": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1440": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1441": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1442": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6048
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x6"
    },
    "1444": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "1446": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1447": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1449": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1450": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "1451": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6037,
        6060
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1452": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x5EE"
    },
    "1455": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1456": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1458": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1459": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1465": {
      "op": "SHL"
    },
    "1466": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1467": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1470": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1472": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1473": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "ADD",
      "path": "24"
    },
    "1474": {
      "op": "MSTORE"
    },
    "1475": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "1477": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1479": {
      "op": "DUP3"
    },
    "1480": {
      "op": "ADD"
    },
    "1481": {
      "op": "MSTORE"
    },
    "1482": {
      "op": "PUSH20",
      "value": "0x4E6F207265776172647320617661696C61626C65"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1505": {
      "op": "SHL"
    },
    "1506": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1508": {
      "op": "DUP3"
    },
    "1509": {
      "op": "ADD"
    },
    "1510": {
      "op": "MSTORE"
    },
    "1511": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1513": {
      "op": "ADD"
    },
    "1514": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x36B"
    },
    "1517": {
      "op": "JUMP"
    },
    "1518": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6029,
        6089
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1519": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6128,
        6138
      ],
      "op": "CALLER",
      "path": "24"
    },
    "1520": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6099,
        6113
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1522": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1523": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1524": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1525": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6127
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x6"
    },
    "1527": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "1529": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1530": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1532": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1533": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "1534": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1535": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1536": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6149,
        6176
      ],
      "op": "SWAP2",
      "path": "24",
      "statement": 11
    },
    "1537": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6149,
        6176
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1538": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6149,
        6176
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "1539": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1540": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6223
      ],
      "op": "PUSH2",
      "path": "24",
      "statement": 12,
      "value": "0x638"
    },
    "1543": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6223
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1544": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6190
      ],
      "op": "PUSH32",
      "path": "24",
      "value": "0x0"
    },
    "1577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1579": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1581": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1583": {
      "op": "SHL"
    },
    "1584": {
      "op": "SUB"
    },
    "1585": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6203
      ],
      "op": "AND",
      "path": "24"
    },
    "1586": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6203
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1587": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6116,
        6139
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1588": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6203
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xE82"
    },
    "1591": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "jump": "i",
      "offset": [
        6186,
        6223
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1592": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6186,
        6223
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1593": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "offset": [
        6019,
        6230
      ],
      "op": "POP",
      "path": "24"
    },
    "1594": {
      "fn": "BitcrushNiceStaking.withdrawNiceRewards",
      "jump": "o",
      "offset": [
        5981,
        6230
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1595": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1596": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1598": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1600": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1602": {
      "op": "SHL"
    },
    "1603": {
      "op": "SUB"
    },
    "1604": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1605": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1606": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "AND",
      "path": "24"
    },
    "1607": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3429,
        3436
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1609": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1610": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1611": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1612": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3482
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x5"
    },
    "1614": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "1616": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1617": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1618": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1619": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1621": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1622": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1623": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3474,
        3492
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "1624": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1625": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1626": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1627": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1628": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "ADD",
      "path": "24"
    },
    "1629": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1630": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1631": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1632": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1633": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1634": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1635": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1"
    },
    "1637": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1638": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1639": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "ADD",
      "path": "24"
    },
    "1640": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1641": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1642": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1643": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "ADD",
      "path": "24"
    },
    "1644": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1645": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1646": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1647": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1648": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3545
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 13,
      "value": "0x3"
    },
    "1650": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3545
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1651": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1652": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1653": {
      "op": "PUSH4",
      "value": "0xDC6E13E1"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1660": {
      "op": "SHL"
    },
    "1661": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1662": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1663": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1665": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1666": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "ADD",
      "path": "24"
    },
    "1667": {
      "op": "SWAP5"
    },
    "1668": {
      "op": "SWAP1"
    },
    "1669": {
      "op": "SWAP5"
    },
    "1670": {
      "op": "MSTORE"
    },
    "1671": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3429,
        3436
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1672": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3429,
        3436
      ],
      "op": "SWAP4",
      "path": "24"
    },
    "1673": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1674": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3448,
        3492
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1675": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3545
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1676": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3545
      ],
      "op": "AND",
      "path": "24"
    },
    "1677": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3545
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1678": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3554
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xDC6E13E1"
    },
    "1683": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3554
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1686": {
      "op": "ADD"
    },
    "1687": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x120"
    },
    "1690": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1692": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1693": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1694": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1695": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "SUB",
      "path": "24"
    },
    "1696": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1697": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1699": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP8",
      "path": "24"
    },
    "1700": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "GAS",
      "path": "24"
    },
    "1701": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "CALL",
      "path": "24"
    },
    "1702": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "1703": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1704": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "1705": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x6B6"
    },
    "1708": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1709": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "1710": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1712": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1713": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "1714": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "1715": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1717": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "REVERT",
      "path": "24"
    },
    "1718": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1719": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "POP",
      "path": "24"
    },
    "1720": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "POP",
      "path": "24"
    },
    "1721": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "POP",
      "path": "24"
    },
    "1722": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "POP",
      "path": "24"
    },
    "1723": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1725": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1726": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "1727": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "1729": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "NOT",
      "path": "24"
    },
    "1730": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "1732": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1733": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "ADD",
      "path": "24"
    },
    "1734": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "AND",
      "path": "24"
    },
    "1735": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1736": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "ADD",
      "path": "24"
    },
    "1737": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1738": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1740": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1741": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "POP",
      "path": "24"
    },
    "1742": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1743": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "ADD",
      "path": "24"
    },
    "1744": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1745": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x6DA"
    },
    "1748": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1749": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1750": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x122C"
    },
    "1753": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "i",
      "offset": [
        3534,
        3564
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1754": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3534,
        3564
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1755": {
      "op": "POP"
    },
    "1756": {
      "op": "POP"
    },
    "1757": {
      "op": "POP"
    },
    "1758": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3502,
        3564
      ],
      "op": "DUP6",
      "path": "24"
    },
    "1759": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3502,
        3564
      ],
      "op": "DUP8",
      "path": "24"
    },
    "1760": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3502,
        3564
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1761": {
      "op": "POP"
    },
    "1762": {
      "op": "POP"
    },
    "1763": {
      "op": "POP"
    },
    "1764": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3659,
        3678
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 14,
      "value": "0x20"
    },
    "1766": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3659,
        3678
      ],
      "op": "DUP5",
      "path": "24"
    },
    "1767": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3659,
        3678
      ],
      "op": "ADD",
      "path": "24"
    },
    "1768": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3659,
        3678
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1769": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3609,
        3626
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x8"
    },
    "1771": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3609,
        3626
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1772": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3692
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x713"
    },
    "1775": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3692
      ],
      "op": "SWAP5",
      "path": "24"
    },
    "1776": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3659,
        3678
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1777": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3659,
        3678
      ],
      "op": "SWAP4",
      "path": "24"
    },
    "1778": {
      "op": "POP"
    },
    "1779": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3637
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x70D"
    },
    "1782": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3637
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1783": {
      "op": "POP"
    },
    "1784": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3632,
        3636
      ],
      "op": "PUSH5",
      "path": "24",
      "value": "0xE8D4A51000"
    },
    "1790": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3632,
        3636
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1791": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3627
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x707"
    },
    "1794": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3627
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1795": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3608
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xED9"
    },
    "1798": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "i",
      "offset": [
        3593,
        3627
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1799": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3627
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1800": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3631
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1801": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3631
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEE5"
    },
    "1804": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "i",
      "offset": [
        3593,
        3637
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1805": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3637
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1806": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3641
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1807": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3641
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEF1"
    },
    "1810": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "i",
      "offset": [
        3593,
        3692
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1811": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3593,
        3692
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1812": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3574,
        3692
      ],
      "op": "SWAP4",
      "path": "24"
    },
    "1813": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "offset": [
        3371,
        3699
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1814": {
      "op": "POP"
    },
    "1815": {
      "op": "POP"
    },
    "1816": {
      "op": "POP"
    },
    "1817": {
      "fn": "BitcrushNiceStaking.pendingProfits",
      "jump": "o",
      "offset": [
        3371,
        3699
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1818": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2694,
        3198
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1819": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "1821": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1823": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1824": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1825": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1826": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x100"
    },
    "1829": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "EXP",
      "path": "24"
    },
    "1830": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1831": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "DIV",
      "path": "24"
    },
    "1832": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1834": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1836": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1838": {
      "op": "SHL"
    },
    "1839": {
      "op": "SUB"
    },
    "1840": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2751
      ],
      "op": "AND",
      "path": "24"
    },
    "1841": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1847": {
      "op": "SHL"
    },
    "1848": {
      "op": "SUB"
    },
    "1849": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2763
      ],
      "op": "AND",
      "path": "24"
    },
    "1850": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2763
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x3A98EF39"
    },
    "1855": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1857": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1858": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1859": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFFFFFFFF"
    },
    "1864": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "AND",
      "path": "24"
    },
    "1865": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xE0"
    },
    "1867": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "SHL",
      "path": "24"
    },
    "1868": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1869": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1870": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1872": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "ADD",
      "path": "24"
    },
    "1873": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "1875": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1877": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1878": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1879": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1880": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "SUB",
      "path": "24"
    },
    "1881": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1882": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1884": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP8",
      "path": "24"
    },
    "1885": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "GAS",
      "path": "24"
    },
    "1886": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "CALL",
      "path": "24"
    },
    "1887": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "1888": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1889": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "1890": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x76F"
    },
    "1893": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1894": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "1895": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1897": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1898": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "1899": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "1900": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1902": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "REVERT",
      "path": "24"
    },
    "1903": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1904": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "POP",
      "path": "24"
    },
    "1905": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "POP",
      "path": "24"
    },
    "1906": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "POP",
      "path": "24"
    },
    "1907": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "POP",
      "path": "24"
    },
    "1908": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1910": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1911": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "1912": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "1914": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "NOT",
      "path": "24"
    },
    "1915": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "1917": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1918": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "ADD",
      "path": "24"
    },
    "1919": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "AND",
      "path": "24"
    },
    "1920": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP3",
      "path": "24"
    },
    "1921": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "ADD",
      "path": "24"
    },
    "1922": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1923": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1925": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1926": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "POP",
      "path": "24"
    },
    "1927": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1928": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "ADD",
      "path": "24"
    },
    "1929": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1930": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x793"
    },
    "1933": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1934": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1935": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1295"
    },
    "1938": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        2740,
        2765
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1939": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2740,
        2765
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1940": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2736,
        2779
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x799"
    },
    "1943": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2736,
        2779
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "1944": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "o",
      "offset": [
        2694,
        3198
      ],
      "op": "JUMP",
      "path": "24"
    },
    "1945": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2736,
        2779
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "1946": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "1948": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "DUP1",
      "path": "24"
    },
    "1949": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1950": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2889,
        2895
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x2"
    },
    "1952": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2889,
        2895
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "1953": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1955": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1956": {
      "op": "PUSH4",
      "value": "0x4828CED9"
    },
    "1961": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1963": {
      "op": "SHL"
    },
    "1964": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP2",
      "path": "24"
    },
    "1965": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "1966": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "1967": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP4",
      "path": "24"
    },
    "1968": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "ADD",
      "path": "24"
    },
    "1969": {
      "op": "MSTORE"
    },
    "1970": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2837,
        2861
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "1972": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2837,
        2861
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1973": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1975": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1977": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1979": {
      "op": "SHL"
    },
    "1980": {
      "op": "SUB"
    },
    "1981": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1982": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "1983": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "AND",
      "path": "24"
    },
    "1984": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2876
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1985": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2888
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x4828CED9"
    },
    "1990": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2888
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "1991": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1993": {
      "op": "ADD"
    },
    "1994": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "1996": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "1998": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "1999": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2000": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2001": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "SUB",
      "path": "24"
    },
    "2002": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2003": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2005": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP8",
      "path": "24"
    },
    "2006": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "GAS",
      "path": "24"
    },
    "2007": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "CALL",
      "path": "24"
    },
    "2008": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2009": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2010": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2011": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x7E8"
    },
    "2014": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2015": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2016": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2018": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2019": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "2020": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2021": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2023": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "REVERT",
      "path": "24"
    },
    "2024": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2025": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "POP",
      "path": "24"
    },
    "2026": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "POP",
      "path": "24"
    },
    "2027": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "POP",
      "path": "24"
    },
    "2028": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "POP",
      "path": "24"
    },
    "2029": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2031": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2032": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2033": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2035": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "NOT",
      "path": "24"
    },
    "2036": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2038": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2039": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "ADD",
      "path": "24"
    },
    "2040": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "AND",
      "path": "24"
    },
    "2041": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2042": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "ADD",
      "path": "24"
    },
    "2043": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2044": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2046": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2047": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "POP",
      "path": "24"
    },
    "2048": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2049": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "ADD",
      "path": "24"
    },
    "2050": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2051": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x80C"
    },
    "2054": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2055": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2056": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1295"
    },
    "2059": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        2864,
        2896
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2060": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2864,
        2896
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2061": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2837,
        2896
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2062": {
      "op": "POP"
    },
    "2063": {
      "branch": 56,
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2910,
        2931
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2064": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2906,
        2940
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x816"
    },
    "2067": {
      "branch": 56,
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2906,
        2940
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2068": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2933,
        2940
      ],
      "op": "POP",
      "path": "24",
      "statement": 15
    },
    "2069": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "o",
      "offset": [
        2694,
        3198
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2070": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2906,
        2940
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2071": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2974,
        2996
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 16,
      "value": "0x9"
    },
    "2073": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2974,
        2996
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2074": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2974,
        3018
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x823"
    },
    "2077": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2974,
        3018
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2078": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3001,
        3017
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2079": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2974,
        3000
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "2082": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        2974,
        3018
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2083": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2974,
        3018
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2084": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2949,
        2971
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x9"
    },
    "2086": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        2949,
        3018
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "2087": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "2089": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2090": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2092": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2093": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2094": {
      "op": "PUSH4",
      "value": "0x3A98EF39"
    },
    "2099": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2101": {
      "op": "SHL"
    },
    "2102": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2103": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2104": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2105": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2106": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3028,
        3046
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2108": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3028,
        3046
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "2109": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3049,
        3128
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x8AB"
    },
    "2112": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3049,
        3128
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "2113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2115": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2117": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2119": {
      "op": "SHL"
    },
    "2120": {
      "op": "SUB"
    },
    "2121": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2122": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2123": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "AND",
      "path": "24"
    },
    "2124": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2125": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3116
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x3A98EF39"
    },
    "2130": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3116
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2131": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2133": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2134": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2135": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ADD",
      "path": "24"
    },
    "2136": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "2137": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "2139": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "2140": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2141": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2142": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2143": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2144": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2145": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SUB",
      "path": "24"
    },
    "2146": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ADD",
      "path": "24"
    },
    "2147": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2148": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3028,
        3046
      ],
      "op": "DUP9",
      "path": "24"
    },
    "2149": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3104
      ],
      "op": "DUP8",
      "path": "24"
    },
    "2150": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "GAS",
      "path": "24"
    },
    "2151": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "CALL",
      "path": "24"
    },
    "2152": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2153": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2154": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2155": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x878"
    },
    "2158": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2159": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2160": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2162": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2163": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "2164": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2165": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2167": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "REVERT",
      "path": "24"
    },
    "2168": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2169": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "POP",
      "path": "24"
    },
    "2170": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "POP",
      "path": "24"
    },
    "2171": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "POP",
      "path": "24"
    },
    "2172": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "POP",
      "path": "24"
    },
    "2173": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2175": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2176": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2177": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2179": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "NOT",
      "path": "24"
    },
    "2180": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2182": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2183": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ADD",
      "path": "24"
    },
    "2184": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "AND",
      "path": "24"
    },
    "2185": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2186": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ADD",
      "path": "24"
    },
    "2187": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2188": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2190": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2191": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "POP",
      "path": "24"
    },
    "2192": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2193": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "ADD",
      "path": "24"
    },
    "2194": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2195": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x89C"
    },
    "2198": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2199": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2200": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1295"
    },
    "2203": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        3093,
        3118
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2204": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3093,
        3118
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2205": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3049,
        3075
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x707"
    },
    "2208": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3049,
        3065
      ],
      "op": "DUP5",
      "path": "24"
    },
    "2209": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3070,
        3074
      ],
      "op": "PUSH5",
      "path": "24",
      "value": "0xE8D4A51000"
    },
    "2215": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3049,
        3069
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xED9"
    },
    "2218": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        3049,
        3075
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2219": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3049,
        3128
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2220": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3158,
        3175
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 17,
      "value": "0x8"
    },
    "2222": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3158,
        3175
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2223": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3028,
        3128
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2224": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3028,
        3128
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2225": {
      "op": "POP"
    },
    "2226": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3158,
        3191
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x8BB"
    },
    "2229": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3158,
        3191
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2230": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3028,
        3128
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2231": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3158,
        3179
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "2234": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "i",
      "offset": [
        3158,
        3191
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2235": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3158,
        3191
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2236": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3138,
        3155
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x8"
    },
    "2238": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "offset": [
        3138,
        3191
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "2239": {
      "op": "POP"
    },
    "2240": {
      "op": "POP"
    },
    "2241": {
      "fn": "BitcrushNiceStaking.updateProfits",
      "jump": "o",
      "offset": [
        2694,
        3198
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2242": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2243": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2245": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2246": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2248": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2250": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2252": {
      "op": "SHL"
    },
    "2253": {
      "op": "SUB"
    },
    "2254": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "2255": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "12"
    },
    "2256": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "2257": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8EC"
    },
    "2260": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2261": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2263": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2264": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2270": {
      "op": "SHL"
    },
    "2271": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2272": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2273": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2275": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "2276": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "2279": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2280": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F7"
    },
    "2283": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2284": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2285": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 18,
      "value": "0x8F6"
    },
    "2288": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1759,
        1760
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2290": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1750
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF09"
    },
    "2293": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2294": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2295": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2296": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3841,
        5876
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2297": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3927,
        3939
      ],
      "op": "NUMBER",
      "path": "24",
      "statement": 19
    },
    "2298": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3902,
        3923
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x7"
    },
    "2300": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3902,
        3923
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2301": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3902,
        3939
      ],
      "op": "GT",
      "path": "24"
    },
    "2302": {
      "branch": 57,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3902,
        3939
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2303": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x94A"
    },
    "2306": {
      "branch": 57,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2307": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2309": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2310": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2314": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2316": {
      "op": "SHL"
    },
    "2317": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2318": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2321": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2323": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2324": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "ADD",
      "path": "24"
    },
    "2325": {
      "op": "DUP2"
    },
    "2326": {
      "op": "SWAP1"
    },
    "2327": {
      "op": "MSTORE"
    },
    "2328": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2330": {
      "op": "DUP3"
    },
    "2331": {
      "op": "ADD"
    },
    "2332": {
      "op": "MSTORE"
    },
    "2333": {
      "op": "PUSH32",
      "value": "0x436F6D706F756E6420416C6C206E6F7420796574206170706C696361626C652E"
    },
    "2366": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2368": {
      "op": "DUP3"
    },
    "2369": {
      "op": "ADD"
    },
    "2370": {
      "op": "MSTORE"
    },
    "2371": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2373": {
      "op": "ADD"
    },
    "2374": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x36B"
    },
    "2377": {
      "op": "JUMP"
    },
    "2378": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3881,
        3997
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2379": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4008,
        4032
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2381": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4046,
        4072
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2382": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "2384": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2386": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2387": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2388": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2389": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x100"
    },
    "2392": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "EXP",
      "path": "24"
    },
    "2393": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2394": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "DIV",
      "path": "24"
    },
    "2395": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2399": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2401": {
      "op": "SHL"
    },
    "2402": {
      "op": "SUB"
    },
    "2403": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4086
      ],
      "op": "AND",
      "path": "24"
    },
    "2404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2408": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2410": {
      "op": "SHL"
    },
    "2411": {
      "op": "SUB"
    },
    "2412": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4105
      ],
      "op": "AND",
      "path": "24"
    },
    "2413": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4105
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x38ED019A"
    },
    "2418": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2420": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2421": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2422": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFFFFFFFF"
    },
    "2427": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "AND",
      "path": "24"
    },
    "2428": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xE0"
    },
    "2430": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "SHL",
      "path": "24"
    },
    "2431": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2432": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2433": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2435": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "ADD",
      "path": "24"
    },
    "2436": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "2438": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2440": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2441": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2442": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2443": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "SUB",
      "path": "24"
    },
    "2444": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2445": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2447": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP8",
      "path": "24"
    },
    "2448": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "GAS",
      "path": "24"
    },
    "2449": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "CALL",
      "path": "24"
    },
    "2450": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2451": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2452": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2453": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x9A2"
    },
    "2456": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2457": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2458": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2460": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2461": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "2462": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2463": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2465": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "REVERT",
      "path": "24"
    },
    "2466": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2467": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "POP",
      "path": "24"
    },
    "2468": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "POP",
      "path": "24"
    },
    "2469": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "POP",
      "path": "24"
    },
    "2470": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "POP",
      "path": "24"
    },
    "2471": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2473": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2474": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2475": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2477": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "NOT",
      "path": "24"
    },
    "2478": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2480": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2481": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "ADD",
      "path": "24"
    },
    "2482": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "AND",
      "path": "24"
    },
    "2483": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2484": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "ADD",
      "path": "24"
    },
    "2485": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2486": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2488": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2489": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "POP",
      "path": "24"
    },
    "2490": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2491": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "ADD",
      "path": "24"
    },
    "2492": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2493": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x9C6"
    },
    "2496": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2497": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2498": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1295"
    },
    "2501": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4075,
        4107
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2502": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4075,
        4107
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2503": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4046,
        4107
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2504": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4046,
        4107
      ],
      "op": "POP",
      "path": "24"
    },
    "2505": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4117,
        4138
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2507": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "2509": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2511": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2512": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2513": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2514": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x100"
    },
    "2517": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "EXP",
      "path": "24"
    },
    "2518": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2519": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "DIV",
      "path": "24"
    },
    "2520": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2524": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2526": {
      "op": "SHL"
    },
    "2527": {
      "op": "SUB"
    },
    "2528": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4152
      ],
      "op": "AND",
      "path": "24"
    },
    "2529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2531": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2533": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2535": {
      "op": "SHL"
    },
    "2536": {
      "op": "SUB"
    },
    "2537": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4166
      ],
      "op": "AND",
      "path": "24"
    },
    "2538": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4166
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x289BAC07"
    },
    "2543": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2545": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2546": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2547": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFFFFFFFF"
    },
    "2552": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "AND",
      "path": "24"
    },
    "2553": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xE0"
    },
    "2555": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "SHL",
      "path": "24"
    },
    "2556": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2557": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2558": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2560": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "ADD",
      "path": "24"
    },
    "2561": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "2563": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2565": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2566": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2567": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2568": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "SUB",
      "path": "24"
    },
    "2569": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2570": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2572": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP8",
      "path": "24"
    },
    "2573": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "GAS",
      "path": "24"
    },
    "2574": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "CALL",
      "path": "24"
    },
    "2575": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2576": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2577": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2578": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xA1F"
    },
    "2581": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2582": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2583": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2585": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2586": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "2587": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2588": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2590": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "REVERT",
      "path": "24"
    },
    "2591": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2592": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "POP",
      "path": "24"
    },
    "2593": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "POP",
      "path": "24"
    },
    "2594": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "POP",
      "path": "24"
    },
    "2595": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "POP",
      "path": "24"
    },
    "2596": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2598": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2599": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2600": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2602": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "NOT",
      "path": "24"
    },
    "2603": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2605": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2606": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "ADD",
      "path": "24"
    },
    "2607": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "AND",
      "path": "24"
    },
    "2608": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2609": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "ADD",
      "path": "24"
    },
    "2610": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2611": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2613": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2614": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "POP",
      "path": "24"
    },
    "2615": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2616": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "ADD",
      "path": "24"
    },
    "2617": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2618": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xA43"
    },
    "2621": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2622": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2623": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1295"
    },
    "2626": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4141,
        4168
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2627": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4141,
        4168
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2628": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4117,
        4168
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2629": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4117,
        4168
      ],
      "op": "POP",
      "path": "24"
    },
    "2630": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4178,
        4202
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2632": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "2634": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2636": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2637": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2638": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2639": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x100"
    },
    "2642": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "EXP",
      "path": "24"
    },
    "2643": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2644": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "DIV",
      "path": "24"
    },
    "2645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2649": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2651": {
      "op": "SHL"
    },
    "2652": {
      "op": "SUB"
    },
    "2653": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4216
      ],
      "op": "AND",
      "path": "24"
    },
    "2654": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2656": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2658": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2660": {
      "op": "SHL"
    },
    "2661": {
      "op": "SUB"
    },
    "2662": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4234
      ],
      "op": "AND",
      "path": "24"
    },
    "2663": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4234
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xECB1C924"
    },
    "2668": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2670": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2671": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2672": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFFFFFFFF"
    },
    "2677": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "AND",
      "path": "24"
    },
    "2678": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xE0"
    },
    "2680": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "SHL",
      "path": "24"
    },
    "2681": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2682": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2683": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2685": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "ADD",
      "path": "24"
    },
    "2686": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "2688": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2690": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2691": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2692": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2693": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "SUB",
      "path": "24"
    },
    "2694": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2695": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2697": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP8",
      "path": "24"
    },
    "2698": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "GAS",
      "path": "24"
    },
    "2699": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "CALL",
      "path": "24"
    },
    "2700": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2701": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2702": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2703": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xA9C"
    },
    "2706": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2707": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2708": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2710": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2711": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "2712": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2713": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2715": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "REVERT",
      "path": "24"
    },
    "2716": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2717": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "POP",
      "path": "24"
    },
    "2718": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "POP",
      "path": "24"
    },
    "2719": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "POP",
      "path": "24"
    },
    "2720": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "POP",
      "path": "24"
    },
    "2721": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2723": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2724": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2725": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2727": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "NOT",
      "path": "24"
    },
    "2728": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2730": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2731": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "ADD",
      "path": "24"
    },
    "2732": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "AND",
      "path": "24"
    },
    "2733": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2734": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "ADD",
      "path": "24"
    },
    "2735": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2736": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2738": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2739": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "POP",
      "path": "24"
    },
    "2740": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2741": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "ADD",
      "path": "24"
    },
    "2742": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2743": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xAC0"
    },
    "2746": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2747": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2748": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x1295"
    },
    "2751": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4205,
        4236
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2752": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4205,
        4236
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2753": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4178,
        4236
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2754": {
      "op": "POP"
    },
    "2755": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4268,
        4286
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2756": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4300,
        4335
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2757": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4300,
        4335
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2758": {
      "branch": 58,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4300,
        4335
      ],
      "op": "LT",
      "path": "24"
    },
    "2759": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4296,
        4351
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xACE"
    },
    "2762": {
      "branch": 58,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4296,
        4351
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2763": {
      "op": "POP"
    },
    "2764": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4350,
        4351
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 20,
      "value": "0x0"
    },
    "2766": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4296,
        4351
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2767": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4383,
        4396
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2768": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4456
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2769": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4456
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2770": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4456
      ],
      "op": "GT",
      "path": "24"
    },
    "2771": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4456
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2772": {
      "branch": 59,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4456
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2773": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4521
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xAE7"
    },
    "2776": {
      "branch": 59,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4521
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2777": {
      "op": "POP"
    },
    "2778": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4508,
        4521
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2779": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4472,
        4504
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xAE4"
    },
    "2782": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4472,
        4482
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2783": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4487,
        4503
      ],
      "op": "DUP6",
      "path": "24"
    },
    "2784": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4472,
        4486
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "2787": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4472,
        4504
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2788": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4472,
        4504
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2789": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4472,
        4521
      ],
      "op": "LT",
      "path": "24"
    },
    "2790": {
      "branch": 60,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4472,
        4521
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2791": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4423,
        4521
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2792": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2793": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xAF3"
    },
    "2796": {
      "branch": 60,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2797": {
      "op": "POP"
    },
    "2798": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4545,
        4558
      ],
      "op": "DUP3",
      "path": "24",
      "statement": 21
    },
    "2799": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xB00"
    },
    "2802": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2803": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2804": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4586,
        4618
      ],
      "op": "PUSH2",
      "path": "24",
      "statement": 22,
      "value": "0xAFD"
    },
    "2807": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4586,
        4596
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2808": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4601,
        4617
      ],
      "op": "DUP5",
      "path": "24"
    },
    "2809": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4586,
        4600
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "2812": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4586,
        4618
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2813": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4586,
        4618
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2814": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4573,
        4618
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2815": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4573,
        4618
      ],
      "op": "POP",
      "path": "24"
    },
    "2816": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4406,
        4618
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2817": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4629,
        4644
      ],
      "op": "PUSH2",
      "path": "24",
      "statement": 23,
      "value": "0xB08"
    },
    "2820": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4629,
        4642
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x71A"
    },
    "2823": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4629,
        4644
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2824": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4629,
        4644
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2825": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4671,
        4681
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2826": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2827": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4687,
        4697
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2828": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4683,
        4684
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2829": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4683,
        4697
      ],
      "op": "LT",
      "path": "24"
    },
    "2830": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2831": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xCE2"
    },
    "2834": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2835": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4754
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x3"
    },
    "2837": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4754
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2838": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2840": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2841": {
      "op": "PUSH4",
      "value": "0x5832D571"
    },
    "2846": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2848": {
      "op": "SHL"
    },
    "2849": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2850": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2851": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2853": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2854": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "ADD",
      "path": "24"
    },
    "2855": {
      "op": "DUP4"
    },
    "2856": {
      "op": "SWAP1"
    },
    "2857": {
      "op": "MSTORE"
    },
    "2858": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4718,
        4740
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2860": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4718,
        4740
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2861": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2863": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2865": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2867": {
      "op": "SHL"
    },
    "2868": {
      "op": "SUB"
    },
    "2869": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4754
      ],
      "op": "AND",
      "path": "24"
    },
    "2870": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4754
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2871": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4769
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x5832D571"
    },
    "2876": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4769
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2877": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2879": {
      "op": "ADD"
    },
    "2880": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "2882": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2884": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2885": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2886": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP4",
      "path": "24"
    },
    "2887": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "SUB",
      "path": "24"
    },
    "2888": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2889": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2891": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP8",
      "path": "24"
    },
    "2892": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "GAS",
      "path": "24"
    },
    "2893": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "CALL",
      "path": "24"
    },
    "2894": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2895": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2896": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "2897": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xB5E"
    },
    "2900": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "2901": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2902": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2904": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2905": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "2906": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2907": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2909": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "REVERT",
      "path": "24"
    },
    "2910": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2911": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "POP",
      "path": "24"
    },
    "2912": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "POP",
      "path": "24"
    },
    "2913": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "POP",
      "path": "24"
    },
    "2914": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "POP",
      "path": "24"
    },
    "2915": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2917": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2918": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "2919": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2921": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "NOT",
      "path": "24"
    },
    "2922": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "2924": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2925": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "ADD",
      "path": "24"
    },
    "2926": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "AND",
      "path": "24"
    },
    "2927": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP3",
      "path": "24"
    },
    "2928": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "ADD",
      "path": "24"
    },
    "2929": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP1",
      "path": "24"
    },
    "2930": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2932": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2933": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "POP",
      "path": "24"
    },
    "2934": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2935": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "ADD",
      "path": "24"
    },
    "2936": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2937": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xB82"
    },
    "2940": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2941": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2942": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x12AE"
    },
    "2945": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4743,
        4772
      ],
      "op": "JUMP",
      "path": "24"
    },
    "2946": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4743,
        4772
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "2947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2951": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2953": {
      "op": "SHL"
    },
    "2954": {
      "op": "SUB"
    },
    "2955": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2956": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2957": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "AND",
      "path": "24"
    },
    "2958": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4786,
        4817
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "2960": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2961": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2962": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2963": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4828
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x5"
    },
    "2965": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "2967": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2968": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "2970": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2971": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2972": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "2973": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "2974": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4908
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 24,
      "value": "0x3"
    },
    "2976": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4908
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "2977": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "2978": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "2979": {
      "op": "PUSH4",
      "value": "0xDC6E13E1"
    },
    "2984": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2986": {
      "op": "SHL"
    },
    "2987": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2988": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "2989": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "2991": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP2",
      "path": "24"
    },
    "2992": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "ADD",
      "path": "24"
    },
    "2993": {
      "op": "SWAP4"
    },
    "2994": {
      "op": "SWAP1"
    },
    "2995": {
      "op": "SWAP4"
    },
    "2996": {
      "op": "MSTORE"
    },
    "2997": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "SWAP4",
      "path": "24"
    },
    "2998": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4820,
        4844
      ],
      "op": "SWAP5",
      "path": "24"
    },
    "2999": {
      "op": "POP"
    },
    "3000": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4908
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3001": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4908
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3002": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4908
      ],
      "op": "AND",
      "path": "24"
    },
    "3003": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4908
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3004": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4917
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xDC6E13E1"
    },
    "3009": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4917
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3010": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3012": {
      "op": "ADD"
    },
    "3013": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x120"
    },
    "3016": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3018": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "3019": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3020": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP4",
      "path": "24"
    },
    "3021": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "SUB",
      "path": "24"
    },
    "3022": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3023": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3025": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP8",
      "path": "24"
    },
    "3026": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "GAS",
      "path": "24"
    },
    "3027": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "CALL",
      "path": "24"
    },
    "3028": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3029": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3030": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3031": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xBE4"
    },
    "3034": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "3035": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "3036": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3038": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3039": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "3040": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "3041": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3043": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "REVERT",
      "path": "24"
    },
    "3044": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3045": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "POP",
      "path": "24"
    },
    "3046": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "POP",
      "path": "24"
    },
    "3047": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "POP",
      "path": "24"
    },
    "3048": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "POP",
      "path": "24"
    },
    "3049": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3051": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "3052": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "3053": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "3055": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "NOT",
      "path": "24"
    },
    "3056": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1F"
    },
    "3058": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP3",
      "path": "24"
    },
    "3059": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "ADD",
      "path": "24"
    },
    "3060": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "AND",
      "path": "24"
    },
    "3061": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP3",
      "path": "24"
    },
    "3062": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "ADD",
      "path": "24"
    },
    "3063": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3064": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3066": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "3067": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "POP",
      "path": "24"
    },
    "3068": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3069": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "ADD",
      "path": "24"
    },
    "3070": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3071": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xC08"
    },
    "3074": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3075": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3076": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x122C"
    },
    "3079": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4897,
        4963
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3080": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4897,
        4963
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3081": {
      "op": "POP"
    },
    "3082": {
      "op": "POP"
    },
    "3083": {
      "op": "POP"
    },
    "3084": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4858,
        4963
      ],
      "op": "DUP6",
      "path": "24"
    },
    "3085": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4858,
        4963
      ],
      "op": "DUP8",
      "path": "24"
    },
    "3086": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4858,
        4963
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "3087": {
      "op": "POP"
    },
    "3088": {
      "op": "POP"
    },
    "3089": {
      "op": "POP"
    },
    "3090": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5125,
        5151
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1"
    },
    "3092": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5125,
        5151
      ],
      "op": "DUP5",
      "path": "24"
    },
    "3093": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5125,
        5151
      ],
      "op": "ADD",
      "path": "24"
    },
    "3094": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5125,
        5151
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "3095": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5058,
        5075
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x8"
    },
    "3097": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5058,
        5075
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "3098": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4859,
        4877
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3100": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4859,
        4877
      ],
      "op": "SWAP5",
      "path": "24"
    },
    "3101": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5152
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xC39"
    },
    "3104": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5152
      ],
      "op": "SWAP5",
      "path": "24"
    },
    "3105": {
      "op": "POP"
    },
    "3106": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5125,
        5151
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3107": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5125,
        5151
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "3108": {
      "op": "POP"
    },
    "3109": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5103
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x70D"
    },
    "3112": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5103
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3113": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5098,
        5102
      ],
      "op": "PUSH5",
      "path": "24",
      "value": "0xE8D4A51000"
    },
    "3119": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5098,
        5102
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3120": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5076
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x707"
    },
    "3123": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5076
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3124": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4858,
        4963
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3125": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5057
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xED9"
    },
    "3128": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5001,
        5076
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3129": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5001,
        5152
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3130": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5221
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 25,
      "value": "0x1"
    },
    "3132": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5221
      ],
      "op": "DUP4",
      "path": "24"
    },
    "3133": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5221
      ],
      "op": "ADD",
      "path": "24"
    },
    "3134": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5221
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "3135": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4978,
        5152
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3136": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4978,
        5152
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3137": {
      "op": "POP"
    },
    "3138": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5269
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xC4B"
    },
    "3141": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5269
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3142": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4978,
        5152
      ],
      "op": "DUP3",
      "path": "24"
    },
    "3143": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5225
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "3146": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5195,
        5269
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3147": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5195,
        5269
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3148": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5166,
        5192
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1"
    },
    "3150": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5166,
        5192
      ],
      "op": "DUP4",
      "path": "24"
    },
    "3151": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5166,
        5192
      ],
      "op": "ADD",
      "path": "24"
    },
    "3152": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5166,
        5269
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "3153": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5288,
        5304
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3154": {
      "branch": 61,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5288,
        5304
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3155": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5284,
        5721
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xCCC"
    },
    "3158": {
      "branch": 61,
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5284,
        5721
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "3159": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5324,
        5343
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3161": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5443
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xC73"
    },
    "3164": {
      "offset": [
        615,
        620
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x2710"
    },
    "3167": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5409
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x707"
    },
    "3170": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5384,
        5408
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x1"
    },
    "3172": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5384,
        5408
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "3173": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5358
      ],
      "op": "DUP6",
      "path": "24"
    },
    "3174": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5383
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xED9"
    },
    "3177": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5383
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3178": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5409
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3179": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5409
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3180": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5409
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFFFFFFFF"
    },
    "3185": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5409
      ],
      "op": "AND",
      "path": "24"
    },
    "3186": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5346,
        5409
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3187": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5346,
        5443
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3188": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5324,
        5443
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3189": {
      "op": "POP"
    },
    "3190": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5480,
        5513
      ],
      "op": "PUSH2",
      "path": "24",
      "statement": 26,
      "value": "0xC7F"
    },
    "3193": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5480,
        5496
      ],
      "op": "DUP12",
      "path": "24"
    },
    "3194": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5324,
        5443
      ],
      "op": "DUP3",
      "path": "24"
    },
    "3195": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5480,
        5500
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "3198": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5480,
        5513
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3199": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5480,
        5513
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3200": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5461,
        5513
      ],
      "op": "SWAP11",
      "path": "24"
    },
    "3201": {
      "op": "POP"
    },
    "3202": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5546,
        5575
      ],
      "op": "PUSH2",
      "path": "24",
      "statement": 27,
      "value": "0xC8B"
    },
    "3205": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5546,
        5558
      ],
      "op": "DUP3",
      "path": "24"
    },
    "3206": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5563,
        5574
      ],
      "op": "DUP3",
      "path": "24"
    },
    "3207": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5546,
        5562
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEF1"
    },
    "3210": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5546,
        5575
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3211": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5546,
        5575
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3216": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3218": {
      "op": "SHL"
    },
    "3219": {
      "op": "SUB"
    },
    "3220": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "DUP6",
      "path": "24",
      "statement": 28
    },
    "3221": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "AND",
      "path": "24"
    },
    "3222": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3224": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3225": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3226": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "3227": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5634
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x6"
    },
    "3229": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "3231": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "3232": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3234": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3235": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "3236": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5650
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "3237": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5531,
        5575
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3238": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5531,
        5575
      ],
      "op": "SWAP3",
      "path": "24"
    },
    "3239": {
      "op": "POP"
    },
    "3240": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5706
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xCB1"
    },
    "3243": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5706
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3244": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5531,
        5575
      ],
      "op": "DUP4",
      "path": "24"
    },
    "3245": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5654
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xEFD"
    },
    "3248": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5623,
        5706
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3249": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5623,
        5706
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3254": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3256": {
      "op": "SHL"
    },
    "3257": {
      "op": "SUB"
    },
    "3258": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "DUP6",
      "path": "24"
    },
    "3259": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "AND",
      "path": "24"
    },
    "3260": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3262": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3263": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3264": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "3265": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5604
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x6"
    },
    "3267": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x20"
    },
    "3269": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "3270": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3272": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3273": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5620
      ],
      "op": "KECCAK256",
      "path": "24"
    },
    "3274": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5593,
        5706
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "3275": {
      "op": "POP"
    },
    "3276": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5284,
        5721
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3277": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4704,
        5731
      ],
      "op": "POP",
      "path": "24"
    },
    "3278": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4704,
        5731
      ],
      "op": "POP",
      "path": "24"
    },
    "3279": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4704,
        5731
      ],
      "op": "POP",
      "path": "24"
    },
    "3280": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "DUP1",
      "path": "24",
      "statement": 29
    },
    "3281": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3282": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xCDA"
    },
    "3285": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3286": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x12E1"
    },
    "3289": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        4699,
        4702
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3290": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3291": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "SWAP2",
      "path": "24"
    },
    "3292": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "POP",
      "path": "24"
    },
    "3293": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4699,
        4702
      ],
      "op": "POP",
      "path": "24"
    },
    "3294": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xB0A"
    },
    "3297": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3298": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        4654,
        5731
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3299": {
      "op": "POP"
    },
    "3300": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5765,
        5777
      ],
      "op": "NUMBER",
      "path": "24",
      "statement": 30
    },
    "3301": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5741,
        5762
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x7"
    },
    "3303": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5741,
        5777
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "3304": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5787,
        5834
      ],
      "op": "PUSH2",
      "path": "24",
      "statement": 31,
      "value": "0xD1B"
    },
    "3307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3311": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3313": {
      "op": "SHL"
    },
    "3314": {
      "op": "SUB"
    },
    "3315": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5787,
        5791
      ],
      "op": "PUSH32",
      "path": "24",
      "value": "0x0"
    },
    "3348": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5787,
        5804
      ],
      "op": "AND",
      "path": "24"
    },
    "3349": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5805,
        5815
      ],
      "op": "CALLER",
      "path": "24"
    },
    "3350": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5817,
        5833
      ],
      "op": "DUP9",
      "path": "24"
    },
    "3351": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5787,
        5804
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xE82"
    },
    "3354": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "i",
      "offset": [
        5787,
        5834
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3355": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5787,
        5834
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3356": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 32,
      "value": "0x3"
    },
    "3358": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3360": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3361": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "SLOAD",
      "path": "24"
    },
    "3362": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3363": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x100"
    },
    "3366": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "EXP",
      "path": "24"
    },
    "3367": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3368": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "DIV",
      "path": "24"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3371": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3373": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3375": {
      "op": "SHL"
    },
    "3376": {
      "op": "SUB"
    },
    "3377": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5855
      ],
      "op": "AND",
      "path": "24"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3380": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3382": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3384": {
      "op": "SHL"
    },
    "3385": {
      "op": "SUB"
    },
    "3386": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5867
      ],
      "op": "AND",
      "path": "24"
    },
    "3387": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5867
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0x9B05DDB3"
    },
    "3392": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3394": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "3395": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3396": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH4",
      "path": "24",
      "value": "0xFFFFFFFF"
    },
    "3401": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "AND",
      "path": "24"
    },
    "3402": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0xE0"
    },
    "3404": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "SHL",
      "path": "24"
    },
    "3405": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3406": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "MSTORE",
      "path": "24"
    },
    "3407": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x4"
    },
    "3409": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "ADD",
      "path": "24"
    },
    "3410": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3412": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x40"
    },
    "3414": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "3415": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3416": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP4",
      "path": "24"
    },
    "3417": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "SUB",
      "path": "24"
    },
    "3418": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3419": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3421": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP8",
      "path": "24"
    },
    "3422": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3423": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "EXTCODESIZE",
      "path": "24"
    },
    "3424": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3425": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3426": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3427": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xD6B"
    },
    "3430": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "3431": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3433": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3434": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "REVERT",
      "path": "24"
    },
    "3435": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3436": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "POP",
      "path": "24"
    },
    "3437": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "GAS",
      "path": "24"
    },
    "3438": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "CALL",
      "path": "24"
    },
    "3439": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3440": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3441": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "ISZERO",
      "path": "24"
    },
    "3442": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0xD7F"
    },
    "3445": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "JUMPI",
      "path": "24"
    },
    "3446": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "3447": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3449": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "DUP1",
      "path": "24"
    },
    "3450": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "RETURNDATACOPY",
      "path": "24"
    },
    "3451": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "RETURNDATASIZE",
      "path": "24"
    },
    "3452": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "PUSH1",
      "path": "24",
      "value": "0x0"
    },
    "3454": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "REVERT",
      "path": "24"
    },
    "3455": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3456": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "POP",
      "path": "24"
    },
    "3457": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "POP",
      "path": "24"
    },
    "3458": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "POP",
      "path": "24"
    },
    "3459": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        5844,
        5869
      ],
      "op": "POP",
      "path": "24"
    },
    "3460": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3871,
        5876
      ],
      "op": "POP",
      "path": "24"
    },
    "3461": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3871,
        5876
      ],
      "op": "POP",
      "path": "24"
    },
    "3462": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3871,
        5876
      ],
      "op": "POP",
      "path": "24"
    },
    "3463": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3871,
        5876
      ],
      "op": "POP",
      "path": "24"
    },
    "3464": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3871,
        5876
      ],
      "op": "POP",
      "path": "24"
    },
    "3465": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "offset": [
        3871,
        5876
      ],
      "op": "POP",
      "path": "24"
    },
    "3466": {
      "fn": "BitcrushNiceStaking.compoundAll",
      "jump": "o",
      "offset": [
        3841,
        5876
      ],
      "op": "JUMP",
      "path": "24"
    },
    "3467": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2377,
        2500
      ],
      "op": "JUMPDEST",
      "path": "24"
    },
    "3468": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3470": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3471": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3473": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3475": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3477": {
      "op": "SHL"
    },
    "3478": {
      "op": "SUB"
    },
    "3479": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "3480": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "12"
    },
    "3481": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "3482": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB5"
    },
    "3485": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3486": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3488": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3489": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3493": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3495": {
      "op": "SHL"
    },
    "3496": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3497": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3498": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3500": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "3501": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "3504": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3505": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F7"
    },
    "3508": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3509": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3510": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2440,
        2446
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 33,
      "value": "0x2"
    },
    "3512": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2440,
        2456
      ],
      "op": "DUP2",
      "path": "24"
    },
    "3513": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2440,
        2456
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3514": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2440,
        2456
      ],
      "op": "SSTORE",
      "path": "24"
    },
    "3515": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2471,
        2493
      ],
      "op": "PUSH1",
      "path": "24",
      "statement": 34,
      "value": "0x40"
    },
    "3517": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2471,
        2493
      ],
      "op": "MLOAD",
      "path": "24"
    },
    "3518": {
      "op": "DUP2"
    },
    "3519": {
      "op": "DUP2"
    },
    "3520": {
      "op": "MSTORE"
    },
    "3521": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2471,
        2493
      ],
      "op": "PUSH32",
      "path": "24",
      "value": "0x62AEAE90D89735CC89A299ECB77480C7ED88F04481174A37EE38B11DC60515F7"
    },
    "3554": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2471,
        2493
      ],
      "op": "SWAP1",
      "path": "24"
    },
    "3555": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3557": {
      "op": "ADD"
    },
    "3558": {
      "fn": "BitcrushNiceStaking.setPoolId",
      "offset": [
        2471,
        2493
      ],
      "op": "PUSH2",
      "path": "24",
      "value": "0x4EB"
    },
    "3561": {
      "op": "JUMP"
    },
    "3562": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3563": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3565": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3566": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3568": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3570": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3572": {
      "op": "SHL"
    },
    "3573": {
      "op": "SUB"
    },
    "3574": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "3575": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "12"
    },
    "3576": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "3577": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE14"
    },
    "3580": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3581": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3583": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3584": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3588": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3590": {
      "op": "SHL"
    },
    "3591": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3592": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3593": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3595": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "3596": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "3599": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3600": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F7"
    },
    "3603": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3604": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3607": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3609": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3611": {
      "op": "SHL"
    },
    "3612": {
      "op": "SUB"
    },
    "3613": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 35
    },
    "3614": {
      "branch": 65,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "AND",
      "path": "0"
    },
    "3615": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE79"
    },
    "3618": {
      "branch": 65,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3619": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3621": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3622": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3626": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3628": {
      "op": "SHL"
    },
    "3629": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3630": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3631": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3633": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3635": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3636": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "ADD",
      "path": "0"
    },
    "3637": {
      "op": "MSTORE"
    },
    "3638": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "3640": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3642": {
      "op": "DUP3"
    },
    "3643": {
      "op": "ADD"
    },
    "3644": {
      "op": "MSTORE"
    },
    "3645": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "3678": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3680": {
      "op": "DUP3"
    },
    "3681": {
      "op": "ADD"
    },
    "3682": {
      "op": "MSTORE"
    },
    "3683": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "3690": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "3692": {
      "op": "SHL"
    },
    "3693": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3695": {
      "op": "DUP3"
    },
    "3696": {
      "op": "ADD"
    },
    "3697": {
      "op": "MSTORE"
    },
    "3698": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3700": {
      "op": "ADD"
    },
    "3701": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36B"
    },
    "3704": {
      "op": "JUMP"
    },
    "3705": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3706": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 36,
      "value": "0x638"
    },
    "3709": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2100,
        2108
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3710": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF09"
    },
    "3713": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3714": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        701,
        906
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "3715": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "PUSH1",
      "path": "6",
      "statement": 37,
      "value": "0x40"
    },
    "3717": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP1",
      "path": "6"
    },
    "3718": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "3719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3725": {
      "op": "SHL"
    },
    "3726": {
      "op": "SUB"
    },
    "3727": {
      "op": "DUP5"
    },
    "3728": {
      "op": "AND"
    },
    "3729": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x24"
    },
    "3731": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP3",
      "path": "6"
    },
    "3732": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "ADD",
      "path": "6"
    },
    "3733": {
      "op": "MSTORE"
    },
    "3734": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3736": {
      "op": "DUP1"
    },
    "3737": {
      "op": "DUP3"
    },
    "3738": {
      "op": "ADD"
    },
    "3739": {
      "op": "DUP5"
    },
    "3740": {
      "op": "SWAP1"
    },
    "3741": {
      "op": "MSTORE"
    },
    "3742": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP3",
      "path": "6"
    },
    "3743": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "3744": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP1",
      "path": "6"
    },
    "3745": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP4",
      "path": "6"
    },
    "3746": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "SUB",
      "path": "6"
    },
    "3747": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "3748": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "3749": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "ADD",
      "path": "6"
    },
    "3750": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP2",
      "path": "6"
    },
    "3751": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "3752": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3754": {
      "op": "SWAP1"
    },
    "3755": {
      "op": "SWAP2"
    },
    "3756": {
      "op": "ADD"
    },
    "3757": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "3758": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "3759": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "3760": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "3762": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP2",
      "path": "6"
    },
    "3763": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "ADD",
      "path": "6"
    },
    "3764": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "DUP1",
      "path": "6"
    },
    "3765": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "3766": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3768": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3770": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3772": {
      "op": "SHL"
    },
    "3773": {
      "op": "SUB"
    },
    "3774": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "AND",
      "path": "6"
    },
    "3775": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "3780": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3782": {
      "op": "SHL"
    },
    "3783": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "OR",
      "path": "6"
    },
    "3784": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "3785": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        840,
        898
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "3786": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        813,
        899
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xED4"
    },
    "3789": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        813,
        899
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "3790": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        833,
        838
      ],
      "op": "DUP5",
      "path": "6"
    },
    "3791": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        833,
        838
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "3792": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        813,
        832
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xF59"
    },
    "3795": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "i",
      "offset": [
        813,
        899
      ],
      "op": "JUMP",
      "path": "6"
    },
    "3796": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        813,
        899
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "3797": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        701,
        906
      ],
      "op": "POP",
      "path": "6"
    },
    "3798": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        701,
        906
      ],
      "op": "POP",
      "path": "6"
    },
    "3799": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        701,
        906
      ],
      "op": "POP",
      "path": "6"
    },
    "3800": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "o",
      "offset": [
        701,
        906
      ],
      "op": "JUMP",
      "path": "6"
    },
    "3801": {
      "fn": "SafeMath.mul",
      "offset": [
        3451,
        3547
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "3802": {
      "fn": "SafeMath.mul",
      "offset": [
        3509,
        3516
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "3804": {
      "fn": "SafeMath.mul",
      "offset": [
        3535,
        3540
      ],
      "op": "PUSH2",
      "path": "16",
      "statement": 38,
      "value": "0x713"
    },
    "3807": {
      "fn": "SafeMath.mul",
      "offset": [
        3539,
        3540
      ],
      "op": "DUP3",
      "path": "16"
    },
    "3808": {
      "fn": "SafeMath.mul",
      "offset": [
        3535,
        3536
      ],
      "op": "DUP5",
      "path": "16"
    },
    "3809": {
      "fn": "SafeMath.mul",
      "offset": [
        3535,
        3540
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x12FC"
    },
    "3812": {
      "fn": "SafeMath.mul",
      "jump": "i",
      "offset": [
        3535,
        3540
      ],
      "op": "JUMP",
      "path": "16"
    },
    "3813": {
      "fn": "SafeMath.div",
      "offset": [
        3836,
        3932
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "3814": {
      "fn": "SafeMath.div",
      "offset": [
        3894,
        3901
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "3816": {
      "fn": "SafeMath.div",
      "offset": [
        3920,
        3925
      ],
      "op": "PUSH2",
      "path": "16",
      "statement": 39,
      "value": "0x713"
    },
    "3819": {
      "fn": "SafeMath.div",
      "offset": [
        3924,
        3925
      ],
      "op": "DUP3",
      "path": "16"
    },
    "3820": {
      "fn": "SafeMath.div",
      "offset": [
        3920,
        3921
      ],
      "op": "DUP5",
      "path": "16"
    },
    "3821": {
      "fn": "SafeMath.div",
      "offset": [
        3920,
        3925
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x131B"
    },
    "3824": {
      "fn": "SafeMath.div",
      "jump": "i",
      "offset": [
        3920,
        3925
      ],
      "op": "JUMP",
      "path": "16"
    },
    "3825": {
      "fn": "SafeMath.sub",
      "offset": [
        3108,
        3204
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "3826": {
      "fn": "SafeMath.sub",
      "offset": [
        3166,
        3173
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "3828": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3197
      ],
      "op": "PUSH2",
      "path": "16",
      "statement": 40,
      "value": "0x713"
    },
    "3831": {
      "fn": "SafeMath.sub",
      "offset": [
        3196,
        3197
      ],
      "op": "DUP3",
      "path": "16"
    },
    "3832": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3193
      ],
      "op": "DUP5",
      "path": "16"
    },
    "3833": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3197
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x133D"
    },
    "3836": {
      "fn": "SafeMath.sub",
      "jump": "i",
      "offset": [
        3192,
        3197
      ],
      "op": "JUMP",
      "path": "16"
    },
    "3837": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "3838": {
      "fn": "SafeMath.add",
      "offset": [
        2799,
        2806
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "3840": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "PUSH2",
      "path": "16",
      "statement": 41,
      "value": "0x713"
    },
    "3843": {
      "fn": "SafeMath.add",
      "offset": [
        2829,
        2830
      ],
      "op": "DUP3",
      "path": "16"
    },
    "3844": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2826
      ],
      "op": "DUP5",
      "path": "16"
    },
    "3845": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1354"
    },
    "3848": {
      "fn": "SafeMath.add",
      "jump": "i",
      "offset": [
        2825,
        2830
      ],
      "op": "JUMP",
      "path": "16"
    },
    "3849": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3850": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3852": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3853": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3860": {
      "op": "SHL"
    },
    "3861": {
      "op": "SUB"
    },
    "3862": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 42
    },
    "3863": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3864": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "3865": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3867": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3869": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3871": {
      "op": "SHL"
    },
    "3872": {
      "op": "SUB"
    },
    "3873": {
      "op": "NOT"
    },
    "3874": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3875": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "3876": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3877": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "OR",
      "path": "0"
    },
    "3878": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3879": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3880": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 43,
      "value": "0x40"
    },
    "3882": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3883": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3884": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3885": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3886": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "AND",
      "path": "0"
    },
    "3887": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3888": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3889": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3890": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "3923": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3924": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3925": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "LOG3",
      "path": "0"
    },
    "3926": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2333,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "3927": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "3928": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3929": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3207,
        3913
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "3930": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3626,
        3649
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "3932": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xFAE"
    },
    "3935": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3680,
        3684
      ],
      "op": "DUP3",
      "path": "6"
    },
    "3936": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "3938": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "3939": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP1",
      "path": "6"
    },
    "3940": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "3942": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "ADD",
      "path": "6"
    },
    "3943": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "3945": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "3946": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP1",
      "path": "6"
    },
    "3947": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "3949": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP2",
      "path": "6"
    },
    "3950": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "3951": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "3953": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "ADD",
      "path": "6"
    },
    "3954": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH32",
      "path": "6",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "3987": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP2",
      "path": "6"
    },
    "3988": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "3989": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "POP",
      "path": "6"
    },
    "3990": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3660,
        3665
      ],
      "op": "DUP6",
      "path": "6"
    },
    "3991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3993": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3995": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3997": {
      "op": "SHL"
    },
    "3998": {
      "op": "SUB"
    },
    "3999": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3679
      ],
      "op": "AND",
      "path": "6"
    },
    "4000": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3679
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x102B"
    },
    "4003": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3679
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "4004": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "4005": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "4006": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "4007": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xFFFFFFFF"
    },
    "4012": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "AND",
      "path": "6"
    },
    "4013": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3652,
        3721
      ],
      "op": "JUMP",
      "path": "6"
    },
    "4014": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "4015": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3735,
        3752
      ],
      "op": "DUP1",
      "path": "6"
    },
    "4016": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3735,
        3752
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "4017": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3626,
        3721
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "4018": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3626,
        3721
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "4019": {
      "op": "POP"
    },
    "4020": {
      "branch": 66,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3735,
        3756
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "4021": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3907
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xED4"
    },
    "4024": {
      "branch": 66,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3907
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "4025": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3830,
        3840
      ],
      "op": "DUP1",
      "path": "6",
      "statement": 44
    },
    "4026": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "DUP1",
      "path": "6"
    },
    "4027": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "4029": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "ADD",
      "path": "6"
    },
    "4030": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "4031": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "4032": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "DUP2",
      "path": "6"
    },
    "4033": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "ADD",
      "path": "6"
    },
    "4034": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "4035": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xFCC"
    },
    "4038": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "4039": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "4040": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x136C"
    },
    "4043": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3819,
        3849
      ],
      "op": "JUMP",
      "path": "6"
    },
    "4044": {
      "branch": 67,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "4045": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xED4"
    },
    "4048": {
      "branch": 67,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "4049": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "4051": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "4052": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4058": {
      "op": "SHL"
    },
    "4059": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "DUP2",
      "path": "6"
    },
    "4060": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "4061": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4063": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "4065": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "DUP3",
      "path": "6"
    },
    "4066": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "ADD",
      "path": "6"
    },
    "4067": {
      "op": "MSTORE"
    },
    "4068": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "4070": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4072": {
      "op": "DUP3"
    },
    "4073": {
      "op": "ADD"
    },
    "4074": {
      "op": "MSTORE"
    },
    "4075": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "4108": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4110": {
      "op": "DUP3"
    },
    "4111": {
      "op": "ADD"
    },
    "4112": {
      "op": "MSTORE"
    },
    "4113": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "4124": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "4126": {
      "op": "SHL"
    },
    "4127": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4129": {
      "op": "DUP3"
    },
    "4130": {
      "op": "ADD"
    },
    "4131": {
      "op": "MSTORE"
    },
    "4132": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4134": {
      "op": "ADD"
    },
    "4135": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x36B"
    },
    "4138": {
      "op": "JUMP"
    },
    "4139": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4140": {
      "fn": "Address.functionCall",
      "offset": [
        3994,
        4006
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "4142": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4077
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 45,
      "value": "0x103A"
    },
    "4145": {
      "fn": "Address.functionCall",
      "offset": [
        4047,
        4053
      ],
      "op": "DUP5",
      "path": "11"
    },
    "4146": {
      "fn": "Address.functionCall",
      "offset": [
        4055,
        4059
      ],
      "op": "DUP5",
      "path": "11"
    },
    "4147": {
      "fn": "Address.functionCall",
      "offset": [
        4061,
        4062
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "4149": {
      "fn": "Address.functionCall",
      "offset": [
        4064,
        4076
      ],
      "op": "DUP6",
      "path": "11"
    },
    "4150": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4046
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1042"
    },
    "4153": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        4025,
        4077
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4154": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4077
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4155": {
      "fn": "Address.functionCall",
      "offset": [
        4018,
        4077
      ],
      "op": "SWAP5",
      "path": "11"
    },
    "4156": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "SWAP4",
      "path": "11"
    },
    "4157": {
      "op": "POP"
    },
    "4158": {
      "op": "POP"
    },
    "4159": {
      "op": "POP"
    },
    "4160": {
      "op": "POP"
    },
    "4161": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4162": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4948,
        5447
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4163": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5113,
        5125
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "4165": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5170,
        5175
      ],
      "op": "DUP3",
      "path": "11",
      "statement": 46
    },
    "4166": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5166
      ],
      "op": "SELFBALANCE",
      "path": "11"
    },
    "4167": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5175
      ],
      "op": "LT",
      "path": "11"
    },
    "4168": {
      "branch": 62,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5175
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "4169": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x10A3"
    },
    "4172": {
      "branch": 62,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "4173": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4175": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4176": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4180": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4182": {
      "op": "SHL"
    },
    "4183": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "DUP2",
      "path": "11"
    },
    "4184": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "4185": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4187": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x4"
    },
    "4189": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4190": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "ADD",
      "path": "11"
    },
    "4191": {
      "op": "MSTORE"
    },
    "4192": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "4194": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4196": {
      "op": "DUP3"
    },
    "4197": {
      "op": "ADD"
    },
    "4198": {
      "op": "MSTORE"
    },
    "4199": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "4232": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4234": {
      "op": "DUP3"
    },
    "4235": {
      "op": "ADD"
    },
    "4236": {
      "op": "MSTORE"
    },
    "4237": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "4244": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "4246": {
      "op": "SHL"
    },
    "4247": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4249": {
      "op": "DUP3"
    },
    "4250": {
      "op": "ADD"
    },
    "4251": {
      "op": "MSTORE"
    },
    "4252": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4254": {
      "op": "ADD"
    },
    "4255": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x36B"
    },
    "4258": {
      "op": "JUMP"
    },
    "4259": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4262": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4264": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4266": {
      "op": "SHL"
    },
    "4267": {
      "op": "SUB"
    },
    "4268": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "DUP6",
      "path": "11",
      "statement": 47
    },
    "4269": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "AND",
      "path": "11"
    },
    "4270": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "EXTCODESIZE",
      "path": "11"
    },
    "4271": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 48,
      "value": "0x10FA"
    },
    "4274": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "4275": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4277": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4278": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4282": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4284": {
      "op": "SHL"
    },
    "4285": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "DUP2",
      "path": "11"
    },
    "4286": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "4287": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4289": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x4"
    },
    "4291": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4292": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "ADD",
      "path": "11"
    },
    "4293": {
      "op": "MSTORE"
    },
    "4294": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "4296": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4298": {
      "op": "DUP3"
    },
    "4299": {
      "op": "ADD"
    },
    "4300": {
      "op": "MSTORE"
    },
    "4301": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "4334": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4336": {
      "op": "DUP3"
    },
    "4337": {
      "op": "ADD"
    },
    "4338": {
      "op": "MSTORE"
    },
    "4339": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4341": {
      "op": "ADD"
    },
    "4342": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x36B"
    },
    "4345": {
      "op": "JUMP"
    },
    "4346": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4347": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5300,
        5312
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "4349": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5314,
        5337
      ],
      "op": "DUP1",
      "path": "11"
    },
    "4350": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5347
      ],
      "op": "DUP7",
      "path": "11"
    },
    "4351": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4353": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4355": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4357": {
      "op": "SHL"
    },
    "4358": {
      "op": "SUB"
    },
    "4359": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5352
      ],
      "op": "AND",
      "path": "11"
    },
    "4360": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5360,
        5365
      ],
      "op": "DUP6",
      "path": "11"
    },
    "4361": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5367,
        5371
      ],
      "op": "DUP8",
      "path": "11"
    },
    "4362": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4364": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4365": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1116"
    },
    "4368": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "4369": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "4370": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x13BE"
    },
    "4373": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4374": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4375": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "4377": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4379": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4380": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP1",
      "path": "11"
    },
    "4381": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP4",
      "path": "11"
    },
    "4382": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SUB",
      "path": "11"
    },
    "4383": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP2",
      "path": "11"
    },
    "4384": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP6",
      "path": "11"
    },
    "4385": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP8",
      "path": "11"
    },
    "4386": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "GAS",
      "path": "11"
    },
    "4387": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "CALL",
      "path": "11"
    },
    "4388": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP3",
      "path": "11"
    },
    "4389": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4390": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4391": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4392": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "11"
    },
    "4393": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP1",
      "path": "11"
    },
    "4394": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "4396": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP2",
      "path": "11"
    },
    "4397": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "EQ",
      "path": "11"
    },
    "4398": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1153"
    },
    "4401": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "4402": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4404": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4405": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "4406": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4407": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x1F"
    },
    "4409": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "NOT",
      "path": "11"
    },
    "4410": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x3F"
    },
    "4412": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "11"
    },
    "4413": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "11"
    },
    "4414": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "AND",
      "path": "11"
    },
    "4415": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4416": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "11"
    },
    "4417": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4419": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "4420": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "11"
    },
    "4421": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4422": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "4423": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "11"
    },
    "4424": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "4426": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "4428": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP5",
      "path": "11"
    },
    "4429": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "11"
    },
    "4430": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATACOPY",
      "path": "11"
    },
    "4431": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1158"
    },
    "4434": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4435": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4436": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "4438": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "4439": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4440": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4441": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4442": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "4443": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4444": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "4445": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "POP",
      "path": "11"
    },
    "4446": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5440
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 49,
      "value": "0x1168"
    },
    "4449": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5406,
        5413
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4450": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5415,
        5425
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4451": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5427,
        5439
      ],
      "op": "DUP7",
      "path": "11"
    },
    "4452": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5405
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1173"
    },
    "4455": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5389,
        5440
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4456": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5440
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4457": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5382,
        5440
      ],
      "op": "SWAP8",
      "path": "11"
    },
    "4458": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4948,
        5447
      ],
      "op": "SWAP7",
      "path": "11"
    },
    "4459": {
      "op": "POP"
    },
    "4460": {
      "op": "POP"
    },
    "4461": {
      "op": "POP"
    },
    "4462": {
      "op": "POP"
    },
    "4463": {
      "op": "POP"
    },
    "4464": {
      "op": "POP"
    },
    "4465": {
      "op": "POP"
    },
    "4466": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4948,
        5447
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4467": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7561,
        8253
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4468": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7707,
        7719
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x60"
    },
    "4470": {
      "branch": 63,
      "fn": "Address.verifyCallResult",
      "offset": [
        7735,
        7742
      ],
      "op": "DUP4",
      "path": "11"
    },
    "4471": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "4472": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1182"
    },
    "4475": {
      "branch": 63,
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "4476": {
      "op": "POP"
    },
    "4477": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7765,
        7775
      ],
      "op": "DUP2",
      "path": "11",
      "statement": 50
    },
    "4478": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x713"
    },
    "4481": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4482": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4483": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4484": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4485": {
      "branch": 64,
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7897
      ],
      "op": "ISZERO",
      "path": "11"
    },
    "4486": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1192"
    },
    "4489": {
      "branch": 64,
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "JUMPI",
      "path": "11"
    },
    "4490": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8070,
        8080
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4491": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8064,
        8081
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4492": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8130,
        8145
      ],
      "op": "DUP1",
      "path": "11"
    },
    "4493": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8117,
        8127
      ],
      "op": "DUP5",
      "path": "11"
    },
    "4494": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8113,
        8115
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x20"
    },
    "4496": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8109,
        8128
      ],
      "op": "ADD",
      "path": "11"
    },
    "4497": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8102,
        8146
      ],
      "op": "REVERT",
      "path": "11"
    },
    "4498": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4499": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8209,
        8221
      ],
      "op": "DUP2",
      "path": "11",
      "statement": 51
    },
    "4500": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x40"
    },
    "4502": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "MLOAD",
      "path": "11"
    },
    "4503": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4507": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4509": {
      "op": "SHL"
    },
    "4510": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "DUP2",
      "path": "11"
    },
    "4511": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "MSTORE",
      "path": "11"
    },
    "4512": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x4"
    },
    "4514": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "ADD",
      "path": "11"
    },
    "4515": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x36B"
    },
    "4518": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "SWAP2",
      "path": "11"
    },
    "4519": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "SWAP1",
      "path": "11"
    },
    "4520": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x13DA"
    },
    "4523": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        8202,
        8222
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4524": {
      "op": "JUMPDEST"
    },
    "4525": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4529": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4531": {
      "op": "SHL"
    },
    "4532": {
      "op": "SUB"
    },
    "4533": {
      "op": "DUP2"
    },
    "4534": {
      "op": "AND"
    },
    "4535": {
      "op": "DUP2"
    },
    "4536": {
      "op": "EQ"
    },
    "4537": {
      "op": "PUSH2",
      "value": "0x638"
    },
    "4540": {
      "op": "JUMPI"
    },
    "4541": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4543": {
      "op": "DUP1"
    },
    "4544": {
      "op": "REVERT"
    },
    "4545": {
      "op": "JUMPDEST"
    },
    "4546": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4548": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4550": {
      "op": "DUP3"
    },
    "4551": {
      "op": "DUP5"
    },
    "4552": {
      "op": "SUB"
    },
    "4553": {
      "op": "SLT"
    },
    "4554": {
      "op": "ISZERO"
    },
    "4555": {
      "op": "PUSH2",
      "value": "0x11D3"
    },
    "4558": {
      "op": "JUMPI"
    },
    "4559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4561": {
      "op": "DUP1"
    },
    "4562": {
      "op": "REVERT"
    },
    "4563": {
      "op": "JUMPDEST"
    },
    "4564": {
      "op": "DUP2"
    },
    "4565": {
      "op": "CALLDATALOAD"
    },
    "4566": {
      "op": "PUSH2",
      "value": "0x713"
    },
    "4569": {
      "op": "DUP2"
    },
    "4570": {
      "op": "PUSH2",
      "value": "0x11AC"
    },
    "4573": {
      "jump": "i",
      "op": "JUMP"
    },
    "4574": {
      "op": "JUMPDEST"
    },
    "4575": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4577": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4579": {
      "op": "DUP3"
    },
    "4580": {
      "op": "DUP5"
    },
    "4581": {
      "op": "SUB"
    },
    "4582": {
      "op": "SLT"
    },
    "4583": {
      "op": "ISZERO"
    },
    "4584": {
      "op": "PUSH2",
      "value": "0x11F0"
    },
    "4587": {
      "op": "JUMPI"
    },
    "4588": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4590": {
      "op": "DUP1"
    },
    "4591": {
      "op": "REVERT"
    },
    "4592": {
      "op": "JUMPDEST"
    },
    "4593": {
      "op": "POP"
    },
    "4594": {
      "op": "CALLDATALOAD"
    },
    "4595": {
      "op": "SWAP2"
    },
    "4596": {
      "op": "SWAP1"
    },
    "4597": {
      "op": "POP"
    },
    "4598": {
      "jump": "o",
      "op": "JUMP"
    },
    "4599": {
      "op": "JUMPDEST"
    },
    "4600": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4602": {
      "op": "DUP1"
    },
    "4603": {
      "op": "DUP3"
    },
    "4604": {
      "op": "MSTORE"
    },
    "4605": {
      "op": "DUP2"
    },
    "4606": {
      "op": "DUP2"
    },
    "4607": {
      "op": "ADD"
    },
    "4608": {
      "op": "MSTORE"
    },
    "4609": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "4642": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4644": {
      "op": "DUP3"
    },
    "4645": {
      "op": "ADD"
    },
    "4646": {
      "op": "MSTORE"
    },
    "4647": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4649": {
      "op": "ADD"
    },
    "4650": {
      "op": "SWAP1"
    },
    "4651": {
      "jump": "o",
      "op": "JUMP"
    },
    "4652": {
      "op": "JUMPDEST"
    },
    "4653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4655": {
      "op": "DUP1"
    },
    "4656": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4658": {
      "op": "DUP1"
    },
    "4659": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4661": {
      "op": "DUP1"
    },
    "4662": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4664": {
      "op": "DUP1"
    },
    "4665": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4667": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "4670": {
      "op": "DUP11"
    },
    "4671": {
      "op": "DUP13"
    },
    "4672": {
      "op": "SUB"
    },
    "4673": {
      "op": "SLT"
    },
    "4674": {
      "op": "ISZERO"
    },
    "4675": {
      "op": "PUSH2",
      "value": "0x124B"
    },
    "4678": {
      "op": "JUMPI"
    },
    "4679": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4681": {
      "op": "DUP1"
    },
    "4682": {
      "op": "REVERT"
    },
    "4683": {
      "op": "JUMPDEST"
    },
    "4684": {
      "op": "DUP10"
    },
    "4685": {
      "op": "MLOAD"
    },
    "4686": {
      "op": "SWAP9"
    },
    "4687": {
      "op": "POP"
    },
    "4688": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4690": {
      "op": "DUP11"
    },
    "4691": {
      "op": "ADD"
    },
    "4692": {
      "op": "MLOAD"
    },
    "4693": {
      "op": "SWAP8"
    },
    "4694": {
      "op": "POP"
    },
    "4695": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4697": {
      "op": "DUP11"
    },
    "4698": {
      "op": "ADD"
    },
    "4699": {
      "op": "MLOAD"
    },
    "4700": {
      "op": "SWAP7"
    },
    "4701": {
      "op": "POP"
    },
    "4702": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4704": {
      "op": "DUP11"
    },
    "4705": {
      "op": "ADD"
    },
    "4706": {
      "op": "MLOAD"
    },
    "4707": {
      "op": "SWAP6"
    },
    "4708": {
      "op": "POP"
    },
    "4709": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4711": {
      "op": "DUP11"
    },
    "4712": {
      "op": "ADD"
    },
    "4713": {
      "op": "MLOAD"
    },
    "4714": {
      "op": "SWAP5"
    },
    "4715": {
      "op": "POP"
    },
    "4716": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4718": {
      "op": "DUP11"
    },
    "4719": {
      "op": "ADD"
    },
    "4720": {
      "op": "MLOAD"
    },
    "4721": {
      "op": "SWAP4"
    },
    "4722": {
      "op": "POP"
    },
    "4723": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "4725": {
      "op": "DUP11"
    },
    "4726": {
      "op": "ADD"
    },
    "4727": {
      "op": "MLOAD"
    },
    "4728": {
      "op": "SWAP3"
    },
    "4729": {
      "op": "POP"
    },
    "4730": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4732": {
      "op": "DUP11"
    },
    "4733": {
      "op": "ADD"
    },
    "4734": {
      "op": "MLOAD"
    },
    "4735": {
      "op": "SWAP2"
    },
    "4736": {
      "op": "POP"
    },
    "4737": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4740": {
      "op": "DUP11"
    },
    "4741": {
      "op": "ADD"
    },
    "4742": {
      "op": "MLOAD"
    },
    "4743": {
      "op": "SWAP1"
    },
    "4744": {
      "op": "POP"
    },
    "4745": {
      "op": "SWAP3"
    },
    "4746": {
      "op": "SWAP6"
    },
    "4747": {
      "op": "SWAP9"
    },
    "4748": {
      "op": "POP"
    },
    "4749": {
      "op": "SWAP3"
    },
    "4750": {
      "op": "SWAP6"
    },
    "4751": {
      "op": "SWAP9"
    },
    "4752": {
      "op": "POP"
    },
    "4753": {
      "op": "SWAP3"
    },
    "4754": {
      "op": "SWAP6"
    },
    "4755": {
      "op": "SWAP9"
    },
    "4756": {
      "jump": "o",
      "op": "JUMP"
    },
    "4757": {
      "op": "JUMPDEST"
    },
    "4758": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4760": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4762": {
      "op": "DUP3"
    },
    "4763": {
      "op": "DUP5"
    },
    "4764": {
      "op": "SUB"
    },
    "4765": {
      "op": "SLT"
    },
    "4766": {
      "op": "ISZERO"
    },
    "4767": {
      "op": "PUSH2",
      "value": "0x12A7"
    },
    "4770": {
      "op": "JUMPI"
    },
    "4771": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4773": {
      "op": "DUP1"
    },
    "4774": {
      "op": "REVERT"
    },
    "4775": {
      "op": "JUMPDEST"
    },
    "4776": {
      "op": "POP"
    },
    "4777": {
      "op": "MLOAD"
    },
    "4778": {
      "op": "SWAP2"
    },
    "4779": {
      "op": "SWAP1"
    },
    "4780": {
      "op": "POP"
    },
    "4781": {
      "jump": "o",
      "op": "JUMP"
    },
    "4782": {
      "op": "JUMPDEST"
    },
    "4783": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4785": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4787": {
      "op": "DUP3"
    },
    "4788": {
      "op": "DUP5"
    },
    "4789": {
      "op": "SUB"
    },
    "4790": {
      "op": "SLT"
    },
    "4791": {
      "op": "ISZERO"
    },
    "4792": {
      "op": "PUSH2",
      "value": "0x12C0"
    },
    "4795": {
      "op": "JUMPI"
    },
    "4796": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4798": {
      "op": "DUP1"
    },
    "4799": {
      "op": "REVERT"
    },
    "4800": {
      "op": "JUMPDEST"
    },
    "4801": {
      "op": "DUP2"
    },
    "4802": {
      "op": "MLOAD"
    },
    "4803": {
      "op": "PUSH2",
      "value": "0x713"
    },
    "4806": {
      "op": "DUP2"
    },
    "4807": {
      "op": "PUSH2",
      "value": "0x11AC"
    },
    "4810": {
      "jump": "i",
      "op": "JUMP"
    },
    "4811": {
      "op": "JUMPDEST"
    },
    "4812": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4817": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4819": {
      "op": "SHL"
    },
    "4820": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4822": {
      "op": "MSTORE"
    },
    "4823": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4825": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4827": {
      "op": "MSTORE"
    },
    "4828": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4830": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4832": {
      "op": "REVERT"
    },
    "4833": {
      "op": "JUMPDEST"
    },
    "4834": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4836": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4838": {
      "op": "NOT"
    },
    "4839": {
      "op": "DUP3"
    },
    "4840": {
      "op": "EQ"
    },
    "4841": {
      "op": "ISZERO"
    },
    "4842": {
      "op": "PUSH2",
      "value": "0x12F5"
    },
    "4845": {
      "op": "JUMPI"
    },
    "4846": {
      "op": "PUSH2",
      "value": "0x12F5"
    },
    "4849": {
      "op": "PUSH2",
      "value": "0x12CB"
    },
    "4852": {
      "jump": "i",
      "op": "JUMP"
    },
    "4853": {
      "op": "JUMPDEST"
    },
    "4854": {
      "op": "POP"
    },
    "4855": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4857": {
      "op": "ADD"
    },
    "4858": {
      "op": "SWAP1"
    },
    "4859": {
      "jump": "o",
      "op": "JUMP"
    },
    "4860": {
      "op": "JUMPDEST"
    },
    "4861": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4863": {
      "op": "DUP2"
    },
    "4864": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4866": {
      "op": "NOT"
    },
    "4867": {
      "op": "DIV"
    },
    "4868": {
      "op": "DUP4"
    },
    "4869": {
      "op": "GT"
    },
    "4870": {
      "op": "DUP3"
    },
    "4871": {
      "op": "ISZERO"
    },
    "4872": {
      "op": "ISZERO"
    },
    "4873": {
      "op": "AND"
    },
    "4874": {
      "op": "ISZERO"
    },
    "4875": {
      "op": "PUSH2",
      "value": "0x1316"
    },
    "4878": {
      "op": "JUMPI"
    },
    "4879": {
      "op": "PUSH2",
      "value": "0x1316"
    },
    "4882": {
      "op": "PUSH2",
      "value": "0x12CB"
    },
    "4885": {
      "jump": "i",
      "op": "JUMP"
    },
    "4886": {
      "op": "JUMPDEST"
    },
    "4887": {
      "op": "POP"
    },
    "4888": {
      "op": "MUL"
    },
    "4889": {
      "op": "SWAP1"
    },
    "4890": {
      "jump": "o",
      "op": "JUMP"
    },
    "4891": {
      "op": "JUMPDEST"
    },
    "4892": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4894": {
      "op": "DUP3"
    },
    "4895": {
      "op": "PUSH2",
      "value": "0x1338"
    },
    "4898": {
      "op": "JUMPI"
    },
    "4899": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4904": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4906": {
      "op": "SHL"
    },
    "4907": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4909": {
      "op": "MSTORE"
    },
    "4910": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4912": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4914": {
      "op": "MSTORE"
    },
    "4915": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4917": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4919": {
      "op": "REVERT"
    },
    "4920": {
      "op": "JUMPDEST"
    },
    "4921": {
      "op": "POP"
    },
    "4922": {
      "op": "DIV"
    },
    "4923": {
      "op": "SWAP1"
    },
    "4924": {
      "jump": "o",
      "op": "JUMP"
    },
    "4925": {
      "op": "JUMPDEST"
    },
    "4926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4928": {
      "op": "DUP3"
    },
    "4929": {
      "op": "DUP3"
    },
    "4930": {
      "op": "LT"
    },
    "4931": {
      "op": "ISZERO"
    },
    "4932": {
      "op": "PUSH2",
      "value": "0x134F"
    },
    "4935": {
      "op": "JUMPI"
    },
    "4936": {
      "op": "PUSH2",
      "value": "0x134F"
    },
    "4939": {
      "op": "PUSH2",
      "value": "0x12CB"
    },
    "4942": {
      "jump": "i",
      "op": "JUMP"
    },
    "4943": {
      "op": "JUMPDEST"
    },
    "4944": {
      "op": "POP"
    },
    "4945": {
      "op": "SUB"
    },
    "4946": {
      "op": "SWAP1"
    },
    "4947": {
      "jump": "o",
      "op": "JUMP"
    },
    "4948": {
      "op": "JUMPDEST"
    },
    "4949": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4951": {
      "op": "DUP3"
    },
    "4952": {
      "op": "NOT"
    },
    "4953": {
      "op": "DUP3"
    },
    "4954": {
      "op": "GT"
    },
    "4955": {
      "op": "ISZERO"
    },
    "4956": {
      "op": "PUSH2",
      "value": "0x1367"
    },
    "4959": {
      "op": "JUMPI"
    },
    "4960": {
      "op": "PUSH2",
      "value": "0x1367"
    },
    "4963": {
      "op": "PUSH2",
      "value": "0x12CB"
    },
    "4966": {
      "jump": "i",
      "op": "JUMP"
    },
    "4967": {
      "op": "JUMPDEST"
    },
    "4968": {
      "op": "POP"
    },
    "4969": {
      "op": "ADD"
    },
    "4970": {
      "op": "SWAP1"
    },
    "4971": {
      "jump": "o",
      "op": "JUMP"
    },
    "4972": {
      "op": "JUMPDEST"
    },
    "4973": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4975": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4977": {
      "op": "DUP3"
    },
    "4978": {
      "op": "DUP5"
    },
    "4979": {
      "op": "SUB"
    },
    "4980": {
      "op": "SLT"
    },
    "4981": {
      "op": "ISZERO"
    },
    "4982": {
      "op": "PUSH2",
      "value": "0x137E"
    },
    "4985": {
      "op": "JUMPI"
    },
    "4986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4988": {
      "op": "DUP1"
    },
    "4989": {
      "op": "REVERT"
    },
    "4990": {
      "op": "JUMPDEST"
    },
    "4991": {
      "op": "DUP2"
    },
    "4992": {
      "op": "MLOAD"
    },
    "4993": {
      "op": "DUP1"
    },
    "4994": {
      "op": "ISZERO"
    },
    "4995": {
      "op": "ISZERO"
    },
    "4996": {
      "op": "DUP2"
    },
    "4997": {
      "op": "EQ"
    },
    "4998": {
      "op": "PUSH2",
      "value": "0x713"
    },
    "5001": {
      "op": "JUMPI"
    },
    "5002": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5004": {
      "op": "DUP1"
    },
    "5005": {
      "op": "REVERT"
    },
    "5006": {
      "op": "JUMPDEST"
    },
    "5007": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5009": {
      "op": "JUMPDEST"
    },
    "5010": {
      "op": "DUP4"
    },
    "5011": {
      "op": "DUP2"
    },
    "5012": {
      "op": "LT"
    },
    "5013": {
      "op": "ISZERO"
    },
    "5014": {
      "op": "PUSH2",
      "value": "0x13A9"
    },
    "5017": {
      "op": "JUMPI"
    },
    "5018": {
      "op": "DUP2"
    },
    "5019": {
      "op": "DUP2"
    },
    "5020": {
      "op": "ADD"
    },
    "5021": {
      "op": "MLOAD"
    },
    "5022": {
      "op": "DUP4"
    },
    "5023": {
      "op": "DUP3"
    },
    "5024": {
      "op": "ADD"
    },
    "5025": {
      "op": "MSTORE"
    },
    "5026": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5028": {
      "op": "ADD"
    },
    "5029": {
      "op": "PUSH2",
      "value": "0x1391"
    },
    "5032": {
      "op": "JUMP"
    },
    "5033": {
      "op": "JUMPDEST"
    },
    "5034": {
      "op": "DUP4"
    },
    "5035": {
      "op": "DUP2"
    },
    "5036": {
      "op": "GT"
    },
    "5037": {
      "op": "ISZERO"
    },
    "5038": {
      "op": "PUSH2",
      "value": "0x13B8"
    },
    "5041": {
      "op": "JUMPI"
    },
    "5042": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5044": {
      "op": "DUP5"
    },
    "5045": {
      "op": "DUP5"
    },
    "5046": {
      "op": "ADD"
    },
    "5047": {
      "op": "MSTORE"
    },
    "5048": {
      "op": "JUMPDEST"
    },
    "5049": {
      "op": "POP"
    },
    "5050": {
      "op": "POP"
    },
    "5051": {
      "op": "POP"
    },
    "5052": {
      "op": "POP"
    },
    "5053": {
      "jump": "o",
      "op": "JUMP"
    },
    "5054": {
      "op": "JUMPDEST"
    },
    "5055": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5057": {
      "op": "DUP3"
    },
    "5058": {
      "op": "MLOAD"
    },
    "5059": {
      "op": "PUSH2",
      "value": "0x13D0"
    },
    "5062": {
      "op": "DUP2"
    },
    "5063": {
      "op": "DUP5"
    },
    "5064": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5066": {
      "op": "DUP8"
    },
    "5067": {
      "op": "ADD"
    },
    "5068": {
      "op": "PUSH2",
      "value": "0x138E"
    },
    "5071": {
      "jump": "i",
      "op": "JUMP"
    },
    "5072": {
      "op": "JUMPDEST"
    },
    "5073": {
      "op": "SWAP2"
    },
    "5074": {
      "op": "SWAP1"
    },
    "5075": {
      "op": "SWAP2"
    },
    "5076": {
      "op": "ADD"
    },
    "5077": {
      "op": "SWAP3"
    },
    "5078": {
      "op": "SWAP2"
    },
    "5079": {
      "op": "POP"
    },
    "5080": {
      "op": "POP"
    },
    "5081": {
      "jump": "o",
      "op": "JUMP"
    },
    "5082": {
      "op": "JUMPDEST"
    },
    "5083": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5085": {
      "op": "DUP2"
    },
    "5086": {
      "op": "MSTORE"
    },
    "5087": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5089": {
      "op": "DUP3"
    },
    "5090": {
      "op": "MLOAD"
    },
    "5091": {
      "op": "DUP1"
    },
    "5092": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5094": {
      "op": "DUP5"
    },
    "5095": {
      "op": "ADD"
    },
    "5096": {
      "op": "MSTORE"
    },
    "5097": {
      "op": "PUSH2",
      "value": "0x13F9"
    },
    "5100": {
      "op": "DUP2"
    },
    "5101": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5103": {
      "op": "DUP6"
    },
    "5104": {
      "op": "ADD"
    },
    "5105": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5107": {
      "op": "DUP8"
    },
    "5108": {
      "op": "ADD"
    },
    "5109": {
      "op": "PUSH2",
      "value": "0x138E"
    },
    "5112": {
      "jump": "i",
      "op": "JUMP"
    },
    "5113": {
      "op": "JUMPDEST"
    },
    "5114": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5116": {
      "op": "ADD"
    },
    "5117": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5119": {
      "op": "NOT"
    },
    "5120": {
      "op": "AND"
    },
    "5121": {
      "op": "SWAP2"
    },
    "5122": {
      "op": "SWAP1"
    },
    "5123": {
      "op": "SWAP2"
    },
    "5124": {
      "op": "ADD"
    },
    "5125": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5127": {
      "op": "ADD"
    },
    "5128": {
      "op": "SWAP3"
    },
    "5129": {
      "op": "SWAP2"
    },
    "5130": {
      "op": "POP"
    },
    "5131": {
      "op": "POP"
    },
    "5132": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "340b3df5311b0fa3e0e835d996f50db6ef7b3702",
  "source": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"./GalacticChef.sol\";\nimport \"./NICEToken.sol\";\n\ncontract BitcrushNiceStaking is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    uint256 public performanceFeeCompounder = 10; // 10/10000 * 100 = 0.1%\n    uint256 public constant MAX_FEE = 1000; // 1000/10000 * 100 = 10%\n    uint256 public constant divisor = 10000;\n    uint256 public poolId;\n    // Contracts to Interact with\n    IStaking public stakingPool;\n    GalacticChef public galacticChef;\n    IERC20 public immutable nice;\n\n    struct UserStaking {\n        uint256 shares;\n        uint256 profitBaseline;\n    }\n    mapping(address => UserStaking) public stakings;\n    mapping(address => uint256) public niceRewards;\n\n    uint256 public lastAutoCompoundBlock;\n\n    // Profit Accumulated Reward Per Share\n    uint256 public accProfitPerShare;\n\n    // Tracking Totals\n    uint256 public totalProfitDistributed; // Total Claimed as Profits\n\n    uint256 public deploymentTimeStamp;\n\n    event PerformanceFeeUpdated(uint256 newFee);\n    event PoolIdUpdated(uint256 poolId);\n\n    constructor(IERC20 _nice) {\n        nice = _nice;\n        deploymentTimeStamp = block.timestamp;\n    }\n\n    /// Store `_staking`.\n    /// @param _staking the new value to store\n    /// @dev stores the _staking address in the state variable `staking`\n    function setStakingPool(IStaking _staking) public onlyOwner {\n        require(\n            address(stakingPool) == address(0x0),\n            \"staking pool address already set\"\n        );\n        stakingPool = _staking;\n    }\n\n    /// Store `_galacticChef`.\n    /// @param _galacticChef the new value to store\n    /// @dev stores the _galacticChef address in the state variable `galacticChef`\n    function setGalacticChef(GalacticChef _galacticChef) public onlyOwner {\n        require(\n            address(galacticChef) == address(0x0),\n            \"staking pool address already set\"\n        );\n        galacticChef = _galacticChef;\n    }\n\n    /// Store `_poolId`.\n    /// @param _poolId the new value to store\n    /// @dev stores the _poolId address in the state variable `poolId`\n    function setPoolId(uint256 _poolId) public onlyOwner {\n        poolId = _poolId;\n        emit PoolIdUpdated(_poolId);\n    }\n\n    /// @notice updates accProfitPerShare based on current Profit available and totalShares\n    /// @dev this allows for consistent profit reporting and no change on profits to distribute\n    function updateProfits() public {\n        if (stakingPool.totalShares() == 0) return;\n        //Todo replace with galatic chef rewards\n        uint256 requestedProfits = galacticChef.mintRewards(poolId);\n        if (requestedProfits == 0) return;\n        totalProfitDistributed = totalProfitDistributed.add(requestedProfits);\n        uint256 profitCalc = requestedProfits.mul(1e12).div(\n            stakingPool.totalShares()\n        );\n        accProfitPerShare = accProfitPerShare.add(profitCalc);\n    }\n\n    /// Get pending Profits to Claim\n    /// @param _address the user's wallet address to calculate profits\n    /// @return pending Profits to be claimed by this user\n    function pendingProfits(address _address) public returns (uint256) {\n        UserStaking memory user = stakings[_address];\n        (user.shares, , , , , , , , ) = stakingPool.stakings(_address);\n        return\n            user.shares.mul(accProfitPerShare).div(1e12).sub(\n                user.profitBaseline\n            );\n    }\n\n    /// compounds the rewards of all users in the pool\n    /// @dev compounds the rewards of all users in the pool while deducting fees\n    function compoundAll() public {\n        require(\n            lastAutoCompoundBlock <= block.number,\n            \"Compound All not yet applicable.\"\n        );\n\n        uint256 compounderReward = 0;\n        uint256 batchStartingIndex = stakingPool.batchStartingIndex();\n        uint256 indexesLength = stakingPool.indexesLength();\n        uint256 autoCompundLimit = stakingPool.autoCompoundLimit();\n\n        uint256 batchStart = batchStartingIndex;\n        if (batchStartingIndex >= indexesLength) batchStart = 0;\n\n        uint256 batchLimit = indexesLength;\n        if (\n            indexesLength <= autoCompundLimit ||\n            batchStart.add(autoCompundLimit) >= indexesLength\n        ) batchLimit = indexesLength;\n        else batchLimit = batchStart.add(autoCompundLimit);\n\n        updateProfits();\n        for (uint256 i = batchStart; i < batchLimit; i++) {\n            address currentAddress = stakingPool.addressIndexes(i);\n            UserStaking storage currentUser = stakings[currentAddress];\n            (currentUser.shares, , , , , , , , ) = stakingPool.stakings(\n                currentAddress\n            );\n\n            uint256 stakerReward = currentUser\n                .shares\n                .mul(accProfitPerShare)\n                .div(1e12)\n                .sub(currentUser.profitBaseline);\n            currentUser.profitBaseline = currentUser.profitBaseline.add(\n                stakerReward\n            );\n\n            if (stakerReward > 0) {\n                uint256 cpAllReward = stakerReward\n                    .mul(performanceFeeCompounder)\n                    .div(divisor);\n                compounderReward = compounderReward.add(cpAllReward);\n                stakerReward = stakerReward.sub(cpAllReward);\n                niceRewards[currentAddress] = niceRewards[currentAddress].add(\n                    stakerReward\n                );\n            }\n        }\n\n        lastAutoCompoundBlock = block.number;\n        nice.safeTransfer(msg.sender, compounderReward);\n        stakingPool.compoundAll();\n    }\n\n    /// withdraw funds of users\n    /// @dev transfer all available funds of users to users wallet\n    function withdrawNiceRewards() public {\n        require(niceRewards[msg.sender] > 0, \"No rewards available\");\n        uint256 amount = niceRewards[msg.sender];\n        niceRewards[msg.sender] = 0;\n        nice.safeTransfer(msg.sender, amount);\n    }\n\n    /// Store `_fee`.\n    /// @param _fee the new value to store\n    /// @dev stores the fee in the state variable `performanceFeeCompounder`\n    function setPerformanceFeeCompounder(uint256 _fee) public onlyOwner {\n        require(_fee > 0, \"Fee must be greater than 0\");\n        require(_fee < MAX_FEE, \"Fee must be less than 10%\");\n        performanceFeeCompounder = _fee;\n        emit PerformanceFeeUpdated(_fee);\n    }\n\n    /// emergency withdraw funds of users\n    /// @dev transfer all available funds of users to users wallet\n    function emergencyWithdraw() public {\n        uint256 amount = niceRewards[msg.sender];\n        niceRewards[msg.sender] = 0;\n        nice.safeTransfer(msg.sender, amount);\n    }\n}\n",
  "sourceMap": "326:6623:24:-:0;;;478:2;436:44;;1338:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:0;719:10:12;921:18:0;:32::i;:::-;-1:-1:-1;;;;;1374:12:24;;;1418:15;1396:19;:37;326:6623;;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;14:306:33:-;100:6;153:2;141:9;132:7;128:23;124:32;121:52;;;169:1;166;159:12;121:52;195:16;;-1:-1:-1;;;;;240:31:33;;230:42;;220:70;;286:1;283;276:12;220:70;309:5;14:306;-1:-1:-1;;;14:306:33:o;:::-;326:6623:24;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/NiceStaking.sol",
  "type": "contract"
}